page 69000 "Prepare Table Migrations"
{
    ApplicationArea = All;
    Caption = 'Prepare Table Migrations';
    PageType = List;
    SourceTable = "Table Migration Buffer";
    UsageCategory = Lists;

    layout
    {
        area(content)
        {
            repeater(General)
            {
                field("From Table ID"; Rec."From Table ID")
                {
                }
                field("From Table Name"; Rec."From Table Name")
                {
                }
                field("From Field Name"; Rec."From Field Name")
                {
                }
                field("To Table Name"; Rec."To Table Name")
                {
                }
                field("To Field Name"; Rec."To Field Name")
                {
                }
                field("Field Type"; Rec."Field Type")
                {
                }
            }
        }
    }

    actions
    {
        area(processing)
        {
            action("Export Codeunit")
            {
                ApplicationArea = All;
                Caption = 'Export Codeunit';
                Promoted = true;
                PromotedCategory = Process;

                trigger OnAction()
                begin
                    ExportCodeunit();
                end;
            }
        }
    }

    procedure ExportCodeunit()
    var
        LastTableMigration: Record "Table Migration Buffer";
        ALCode: Text;
        TableIDs: List of [Integer];
        TableID: Integer;
        Text001Lbl: Label '"Migrate%1"', Locked = true;
    begin
        Clear(ALCode);
        Clear(TableIDs);
        LastTableMigration.Init();

        Rec.Reset();
        if Rec.FindSet() then begin
            ALCode += 'codeunit 69020 "SSO Table Migration Mgt."\';
            ALCode += '{\';
            ALCode += '    //autogenerated from page "Prepare Table Migrations"\';
            ALCode += '    TableNo = "SSO Table Migration";\';
            ALCode += '    trigger OnRun()\';
            ALCode += '    begin\';
            ALCode += '        MigrateTables(Rec);\';
            ALCode += '    end;\';
            repeat
                Rec.TestField("To Table Name");
                Rec.TestField("To Field Name");

                if (LastTableMigration."From Table Name" <> '') and (LastTableMigration."From Table Name" <> Rec."From Table Name") then
                    EndProcedure(LastTableMigration, ALCode);

                if not TableIDs.Contains(Rec."From Table ID") then begin
                    ALCode += 'procedure ' + StrSubstNo(Text001Lbl, Rec."From Table ID") + '()\';
                    ALCode += 'var\';
                    ALCode += '    fromRec: Record "' + Rec."From Table Name" + '";\';
                    ALCode += '    toRec: Record "' + Rec."To Table Name" + '";\';
                    ALCode += 'begin\';
                    ALCode += '    fromRec.Reset();\';
                    ALCode += '    if fromRec.FindSet() then\';
                    ALCode += '        repeat\';
                    TableIDs.Add(Rec."From Table ID");
                    if Rec."From Table Name" <> Rec."To Table Name" then begin
                        ALCode += '            toRec.Init();\';
                    end else begin
                        ALCode += '            toRec.GetBySystemId(fromRec.SystemId);\';
                    end;
                end;

                case Rec."Field Type" of
                    Rec."Field Type"::Media:
                        begin
                            ALCode += '            if fromRec."' + Rec."From Field Name" + '".HasValue() then begin\';
                            ALCode += '                if TenantMedia.Get(fromRec."' + Rec."From Field Name" + '") then begin\';
                            ALCode += '                    TenantMedia.CalcFields(Content);\';
                            ALCode += '                    if TenantMedia.Content.HasValue() then begin\';
                            ALCode += '                        fromRec."' + Rec."From Field Name" + '".CreateInStream(IStream);"\';
                            ALCode += '                        toRec."' + Rec."To Field Name" + '".ImportStream(IStream, TenantMedia.Description, TenantMedia."Mime Type");\';
                            ALCode += '                    end;\';
                            ALCode += '                end;\';
                            ALCode += '            end;\';
                        end;
                    Rec."Field Type"::Blob:
                        begin
                            ALCode += '            if fromRec."' + Rec."From Field Name" + '".HasValue() then begin\';
                            ALCode += '                fromRec.CalcFields("' + Rec."From Field Name" + '");\';
                            ALCode += '                fromRec."' + Rec."From Field Name" + '".CreateInStream(IStream);\';
                            ALCode += '                toRec."' + Rec."To Field Name" + '".CreateOutStream(OStream);\';
                            ALCode += '                CopyStream(OStream, IStream);\';
                            ALCode += '            end;\';
                        end;
                    else
                        ALCode += '            toRec."' + Rec."From Field Name" + '" := fromRec."' + Rec."To Field Name" + '";\';
                end;

                LastTableMigration := Rec;
            until Rec.Next() = 0;
            EndProcedure(LastTableMigration, ALCode);
        end;

        if TableIDs.Count > 0 then begin
            ALCode += '\';
            ALCode += 'procedure MigrateTables(var SSOTableMigration: Record "SSO Table Migration");\';
            ALCode += 'begin\';
            ALCode += '    if SSOTableMigration.Status in [SSOTableMigration.Status::Processed] then\';
            ALCode += '        SSOTableMigration.FieldError(Status);\';
            ALCode += '\';
            ALCode += '    case SSOTableMigration."Table ID" of\';
            foreach TableID in TableIDs do begin
                ALCode += '        ' + Format(TableID) + ':\';
                ALCode += '            ' + StrSubstNo(Text001Lbl, TableID) + '();\';
            end;
            ALCode += '    end;\';
            ALCode += '\';
            ALCode += 'SSOTableMigration.SetStatusProcessed();\';
            ALCode += 'SSOTableMigration.Modify();\';
            ALCode += 'end;\';
        end;

        if TableIDs.Count > 0 then begin
            ALCode += '\';
            ALCode += 'procedure InitTableMigrations()\';
            ALCode += 'var\';
            ALCode += '    TableMigration: Record "SSO Table Migration";\';
            ALCode += 'begin\';
            ALCode += '    TableMigration.Reset();\';
            ALCode += '    TableMigration.DeleteAll();\\';
            foreach TableId in TableIDs do begin
                ALCode += '    TableMigration.Init();\';
                ALCode += '    TableMigration."Table ID" := ' + Format(TableId) + ';\';
                ALCode += '    TableMigration.Insert();\\';
            end;
            ALCode += 'end;\';
        end;

        ALCode += 'var\';
        ALCode += '    OStream: OutStream;\';
        ALCode += '    IStream: InStream;\';
        ALCode += '    TenantMedia: Record "Tenant Media";\';

        ALCode += '}';

        Message(ALCode);
        //TD Create file
    end;

    local procedure EndProcedure
    (
        var LastTableMigration: Record "Table Migration Buffer";
        var ALCode: Text
    )
    var
        myInt: Integer;
    begin
        if ALCode = '' then
            exit;
        if LastTableMigration."From Table Name" <> LastTableMigration."To Table Name" then
            ALCode += '    toRec.Insert();\'
        else
            ALCode += '    toRec.Modify();\';
        ALCode += 'until fromRec.Next() = 0;\';
        ALCode += 'end;\';
    end;


    /*procedure MigrateMedia()
    begin
        if fromAAA.Media1.HasValue() then
            if TenantMedia.Get(fromAAA.Media1.MediaId) then begin
                TenantMedia.CalcFields(Content);
                if TenantMedia.Content.HasValue() then begin
                    fromAAA.Media1.CreateInStream(IStream);
                    ToAAA.Media1.ImportStream(IStream, TenantMedia.Description, TenantMedia."Mime Type")
                end;
            end;
    end;

    procedure MigrateBlob()
    begin
        if fromAAA.Blob1.HasValue() then begin
            fromAAA.CalcFields(Blob1);
            fromAAA.Blob1.CreateInStream(IStream);
            ToAAA.Blob1.CreateOutStream(OStream);
            CopyStream(OStream, IStream);
        end;
    end;*/

    var
        OStream: OutStream;
        IStream: InStream;
        TenantMedia: Record "Tenant Media";
}