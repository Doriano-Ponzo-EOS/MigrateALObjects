codeunit 69020 "SSO Table Migration Mgt."
{
    //autogenerated from page "Prepare Table Migrations"
    TableNo = "SSO Table Migration";
    trigger OnRun()
    begin
        MigrateTables(Rec);
    end;

    /*procedure "Migrate9"()
    var
        fromRec: Record "Country/Region";
        toRec: Record "Country/Region";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.GetBySystemId(fromRec.SystemId);
                toRec."ISO4 Code" := fromRec."EOS ISO4 Code";
                toRec.Modify();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate13"()
    var
        fromRec: Record "Salesperson/Purchaser";
        toRec: Record "Salesperson/Purchaser";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.GetBySystemId(fromRec.SystemId);
                toRec."ID Shop B2B" := fromRec."EOS ID Shop B2B";
                toRec.Modify();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate15"()
    var
        fromRec: Record "G/L Account";
        toRec: Record "G/L Account";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.GetBySystemId(fromRec.SystemId);
                toRec."EOL Copy From" := fromRec."EOS Copy From";
                toRec."EOL Customer Data" := fromRec."EOS Customer Data";
                toRec."EOL Enasarco" := fromRec."EOS Enasarco";
                toRec."EOL Withholding Tax" := fromRec."EOS Withholding Tax";
                toRec.Modify();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate18"()
    var
        fromRec: Record "Customer";
        toRec: Record "Customer";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.GetBySystemId(fromRec.SystemId);
                toRec."EOL Import EDI Document" := fromRec."EOS Import EDI Document";
                toRec."EOL Print Tariff No." := fromRec."EOS Print Tariff No.";
                toRec."EOL Quick Contacts" := fromRec."EOS Quick Contacts";
                toRec."EOL Quick Global Dim. 3 Code" := fromRec."EOS Quick Global Dim. 3 Code";
                toRec."EOL Quick Global Dim. 4 Code" := fromRec."EOS Quick Global Dim. 4 Code";
                toRec."EOL Quick IBAN" := fromRec."EOS Quick IBAN";
                toRec."Main Variant - Not Send" := fromRec."EOS Main Variant - Not Send";
                toRec.Modify();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate23"()
    var
        fromRec: Record "Vendor";
        toRec: Record "Vendor";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.GetBySystemId(fromRec.SystemId);
                toRec."EOL Quick Contacts" := fromRec."EOS Quick Contacts";
                toRec."EOL Quick Global Dim. 3 Code" := fromRec."EOS Quick Global Dim. 3 Code";
                toRec."EOL Quick Global Dim. 4 Code" := fromRec."EOS Quick Global Dim. 4 Code";
                toRec."EOL Quick IBAN" := fromRec."EOS Quick IBAN";
                toRec.Modify();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate27"()
    var
        fromRec: Record "Item";
        toRec: Record "Item";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.GetBySystemId(fromRec.SystemId);
                toRec."EOL Enasarco" := fromRec."EOS Enasarco";
                toRec."EOL Print Assembly Components" := fromRec."EOS Print Assembly Components";
                toRec."EOL Withholding Tax" := fromRec."EOS Withholding Tax";
                toRec."FTE Code Type" := fromRec."EOS FTE Code Type";
                toRec."FTE Code Value" := fromRec."EOS FTE Code Value";
                toRec."Optional Parent Item No." := fromRec."EOS Optional Parent Item No.";
                toRec."Variant Group Code" := fromRec."EOS Variant Group Code";
                toRec.Modify();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate36"()
    var
        fromRec: Record "Sales Header";
        toRec: Record "Sales Header";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.GetBySystemId(fromRec.SystemId);
                toRec."BCN MMI Amount Including VAT" := fromRec."EOS MMI Amount Including VAT";
                toRec."BCN MMI Base Amount" := fromRec."EOS MMI Base Amount";
                toRec."BCN MMI Document No." := fromRec."EOS MMI Document No.";
                toRec."BCN MMI Entry No." := fromRec."EOS MMI Entry No.";
                toRec."BCN MMI Reason Code" := fromRec."EOS MMI Reason Code";
                toRec."BCN MMI Typology" := fromRec."EOS MMI Typology";
                toRec."Confirmation Status" := fromRec."EOS Confirmation Status";
                toRec."EOL Job No." := fromRec."EOS Job No.";
                toRec."EOL Point Of Sale Order" := fromRec."EOS Point Of Sale Order";
                toRec."ShippyPro Shipping Content" := fromRec."EOS ShippyPro Shipping Content";
                toRec."ShippyPro Shipping Notes" := fromRec."EOS ShippyPro Shipping Notes";
                toRec.Modify();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate37"()
    var
        fromRec: Record "Sales Line";
        toRec: Record "Sales Line";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.GetBySystemId(fromRec.SystemId);
                toRec."Base Price" := fromRec."EOS Base Price";
                toRec."Calculated Profit" := fromRec."EOS Calculated Profit";
                toRec."Calculated Profit %" := fromRec."EOS Calculated Profit %";
                toRec."Calculated Unit Price" := fromRec."EOS Calculated Unit Price";
                toRec."Direct Unit Cost" := fromRec."EOS Direct Unit Cost";
                toRec."Mark-Up %" := fromRec."EOS Mark-Up %";
                toRec."Notes" := fromRec."EOS Notes";
                toRec."Source Type" := fromRec."EOS Source Type";
                toRec."Vendor No." := fromRec."EOS Vendor No.";
                toRec.Modify();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate38"()
    var
        fromRec: Record "Purchase Header";
        toRec: Record "Purchase Header";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.GetBySystemId(fromRec.SystemId);
                toRec."Approver Category Code" := fromRec."EOS Approver Category Code";
                toRec."BCN MMI Amount Including VAT" := fromRec."EOS MMI Amount Including VAT";
                toRec."BCN MMI Base Amount" := fromRec."EOS MMI Base Amount";
                toRec."BCN MMI Document No." := fromRec."EOS MMI Document No.";
                toRec."BCN MMI Entry No." := fromRec."EOS MMI Entry No.";
                toRec."BCN MMI Reason Code" := fromRec."EOS MMI Reason Code";
                toRec."BCN MMI Typology" := fromRec."EOS MMI Typology";
                toRec."Order Confirmation Status" := fromRec."EOS Order Confirmation Status";
                toRec.Modify();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate81"()
    var
        fromRec: Record "Gen. Journal Line";
        toRec: Record "Gen. Journal Line";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.GetBySystemId(fromRec.SystemId);
                toRec."BCN MMI Document No." := fromRec."EOS MMI Document No.";
                toRec."BCN MMI Entry No." := fromRec."EOS MMI Entry No.";
                toRec."BCN MMI Reason Code" := fromRec."EOS MMI Reason Code";
                toRec."BCN MMI Typology" := fromRec."EOS MMI Typology";
                toRec.Modify();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate91"()
    var
        fromRec: Record "User Setup";
        toRec: Record "User Setup";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.GetBySystemId(fromRec.SystemId);
                toRec."Default Job No." := fromRec."EOS Default Job No.";
                toRec."Default Job Task No." := fromRec."EOS Default Job Task No.";
                toRec."Default Type" := fromRec."EOS Default Type";
                toRec."Default Work Type Code" := fromRec."EOS Default Work Type Code";
                toRec."EOL Insert Barcode" := fromRec."EOS Insert Barcode";
                toRec."EOL Job Team Admin" := fromRec."EOS Job Team Admin";
                toRec.Modify();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate110"()
    var
        fromRec: Record "Sales Shipment Header";
        toRec: Record "Sales Shipment Header";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.GetBySystemId(fromRec.SystemId);
                toRec."BCN MMI Amount Including VAT" := fromRec."EOS MMI Amount Including VAT";
                toRec."BCN MMI Base Amount" := fromRec."EOS MMI Base Amount";
                toRec."BCN MMI Document No." := fromRec."EOS MMI Document No.";
                toRec."BCN MMI Entry No." := fromRec."EOS MMI Entry No.";
                toRec."BCN MMI Reason Code" := fromRec."EOS MMI Reason Code";
                toRec."BCN MMI Typology" := fromRec."EOS MMI Typology";
                toRec."Confirmation Status" := fromRec."EOS Confirmation Status";
                toRec."EOL Additional Note" := fromRec."EOS Additional Note";
                toRec."EOL Goods Aspect" := fromRec."EOS Goods Aspect";
                toRec."EOL Goods Aspect Code" := fromRec."EOS Goods Aspect Code";
                toRec."EOL Shipment Method Descr." := fromRec."EOS Shipment Method Descr.";
                toRec."EOL Shipping Agent Address" := fromRec."EOS Shipping Agent Address";
                toRec."EOL Shipping Agent Name" := fromRec."EOS Shipping Agent Name";
                toRec."EOL Total Gross Weight" := fromRec."EOS Total Gross Weight";
                toRec."EOL Total Net Weight" := fromRec."EOS Total Net Weight";
                toRec."EOL Total Volume" := fromRec."EOS Total Volume";
                toRec."EOL Transport Method Descr." := fromRec."EOS Transport Method Descr.";
                toRec."EOL Transport Performed by.." := fromRec."EOS Transport Performed by..";
                toRec."EOL Transport Reason" := fromRec."EOS Transport Reason";
                toRec."EOL Transport Reason Code" := fromRec."EOS Transport Reason Code";
                toRec."EOL Job No." := fromRec."EOS Job No.";
                toRec."EOL Point Of Sale Order" := fromRec."EOS Point Of Sale Order";
                toRec."EOL Total Packs" := fromRec."EOS Total Packs";
                toRec."ShippyPro Shipping Content" := fromRec."EOS ShippyPro Shipping Content";
                toRec."ShippyPro Shipping Notes" := fromRec."EOS ShippyPro Shipping Notes";
                toRec."Status Text" := fromRec."EOS Status Text";
                toRec."Status Value" := fromRec."EOS Status Value";
                toRec.Modify();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate111"()
    var
        fromRec: Record "Sales Shipment Line";
        toRec: Record "Sales Shipment Line";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.GetBySystemId(fromRec.SystemId);
                toRec."Base Price" := fromRec."EOS Base Price";
                toRec."Calculated Profit" := fromRec."EOS Calculated Profit";
                toRec."Calculated Profit %" := fromRec."EOS Calculated Profit %";
                toRec."Calculated Unit Price" := fromRec."EOS Calculated Unit Price";
                toRec."Direct Unit Cost" := fromRec."EOS Direct Unit Cost";
                toRec."Mark-Up %" := fromRec."EOS Mark-Up %";
                toRec."Notes" := fromRec."EOS Notes";
                toRec."Source Type" := fromRec."EOS Source Type";
                toRec."Vendor No." := fromRec."EOS Vendor No.";
                toRec.Modify();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate112"()
    var
        fromRec: Record "Sales Invoice Header";
        toRec: Record "Sales Invoice Header";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.GetBySystemId(fromRec.SystemId);
                toRec."BCN MMI Amount Including VAT" := fromRec."EOS MMI Amount Including VAT";
                toRec."BCN MMI Base Amount" := fromRec."EOS MMI Base Amount";
                toRec."BCN MMI Document No." := fromRec."EOS MMI Document No.";
                toRec."BCN MMI Entry No." := fromRec."EOS MMI Entry No.";
                toRec."BCN MMI Reason Code" := fromRec."EOS MMI Reason Code";
                toRec."BCN MMI Typology" := fromRec."EOS MMI Typology";
                toRec."Confirmation Status" := fromRec."EOS Confirmation Status";
                toRec."EOL Job No." := fromRec."EOS Job No.";
                toRec."EOL Point Of Sale Order" := fromRec."EOS Point Of Sale Order";
                toRec."ShippyPro Shipping Content" := fromRec."EOS ShippyPro Shipping Content";
                toRec."ShippyPro Shipping Notes" := fromRec."EOS ShippyPro Shipping Notes";
                toRec.Modify();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate113"()
    var
        fromRec: Record "Sales Invoice Line";
        toRec: Record "Sales Invoice Line";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.GetBySystemId(fromRec.SystemId);
                toRec."Base Price" := fromRec."EOS Base Price";
                toRec."Calculated Profit" := fromRec."EOS Calculated Profit";
                toRec."Calculated Profit %" := fromRec."EOS Calculated Profit %";
                toRec."Calculated Unit Price" := fromRec."EOS Calculated Unit Price";
                toRec."Direct Unit Cost" := fromRec."EOS Direct Unit Cost";
                toRec."Mark-Up %" := fromRec."EOS Mark-Up %";
                toRec."Notes" := fromRec."EOS Notes";
                toRec."Source Type" := fromRec."EOS Source Type";
                toRec."Vendor No." := fromRec."EOS Vendor No.";
                toRec.Modify();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate114"()
    var
        fromRec: Record "Sales Cr.Memo Header";
        toRec: Record "Sales Cr.Memo Header";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.GetBySystemId(fromRec.SystemId);
                toRec."BCN MMI Amount Including VAT" := fromRec."EOS MMI Amount Including VAT";
                toRec."BCN MMI Base Amount" := fromRec."EOS MMI Base Amount";
                toRec."BCN MMI Document No." := fromRec."EOS MMI Document No.";
                toRec."BCN MMI Entry No." := fromRec."EOS MMI Entry No.";
                toRec."BCN MMI Reason Code" := fromRec."EOS MMI Reason Code";
                toRec."BCN MMI Typology" := fromRec."EOS MMI Typology";
                toRec."Confirmation Status" := fromRec."EOS Confirmation Status";
                toRec."EOL Job No." := fromRec."EOS Job No.";
                toRec."EOL Point Of Sale Order" := fromRec."EOS Point Of Sale Order";
                toRec."ShippyPro Shipping Content" := fromRec."EOS ShippyPro Shipping Content";
                toRec."ShippyPro Shipping Notes" := fromRec."EOS ShippyPro Shipping Notes";
                toRec.Modify();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate115"()
    var
        fromRec: Record "Sales Cr.Memo Line";
        toRec: Record "Sales Cr.Memo Line";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.GetBySystemId(fromRec.SystemId);
                toRec."Base Price" := fromRec."EOS Base Price";
                toRec."Calculated Profit" := fromRec."EOS Calculated Profit";
                toRec."Calculated Profit %" := fromRec."EOS Calculated Profit %";
                toRec."Calculated Unit Price" := fromRec."EOS Calculated Unit Price";
                toRec."Direct Unit Cost" := fromRec."EOS Direct Unit Cost";
                toRec."Mark-Up %" := fromRec."EOS Mark-Up %";
                toRec."Notes" := fromRec."EOS Notes";
                toRec."Source Type" := fromRec."EOS Source Type";
                toRec."Vendor No." := fromRec."EOS Vendor No.";
                toRec.Modify();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate120"()
    var
        fromRec: Record "Purch. Rcpt. Header";
        toRec: Record "Purch. Rcpt. Header";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.GetBySystemId(fromRec.SystemId);
                toRec."BCN MMI Amount Including VAT" := fromRec."EOS MMI Amount Including VAT";
                toRec."BCN MMI Base Amount" := fromRec."EOS MMI Base Amount";
                toRec."BCN MMI Document No." := fromRec."EOS MMI Document No.";
                toRec."BCN MMI Entry No." := fromRec."EOS MMI Entry No.";
                toRec."BCN MMI Reason Code" := fromRec."EOS MMI Reason Code";
                toRec."BCN MMI Typology" := fromRec."EOS MMI Typology";
                toRec."Confirmation Status" := fromRec."EOS Confirmation Status";
                toRec.Modify();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate122"()
    var
        fromRec: Record "Purch. Inv. Header";
        toRec: Record "Purch. Inv. Header";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.GetBySystemId(fromRec.SystemId);
                toRec."BCN MMI Amount Including VAT" := fromRec."EOS MMI Amount Including VAT";
                toRec."BCN MMI Base Amount" := fromRec."EOS MMI Base Amount";
                toRec."BCN MMI Document No." := fromRec."EOS MMI Document No.";
                toRec."BCN MMI Entry No." := fromRec."EOS MMI Entry No.";
                toRec."BCN MMI Reason Code" := fromRec."EOS MMI Reason Code";
                toRec."BCN MMI Typology" := fromRec."EOS MMI Typology";
                toRec."Confirmation Status" := fromRec."EOS Confirmation Status";
                toRec.Modify();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate124"()
    var
        fromRec: Record "Purch. Cr. Memo Hdr.";
        toRec: Record "Purch. Cr. Memo Hdr.";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.GetBySystemId(fromRec.SystemId);
                toRec."BCN MMI Amount Including VAT" := fromRec."EOS MMI Amount Including VAT";
                toRec."BCN MMI Base Amount" := fromRec."EOS MMI Base Amount";
                toRec."BCN MMI Document No." := fromRec."EOS MMI Document No.";
                toRec."BCN MMI Entry No." := fromRec."EOS MMI Entry No.";
                toRec."BCN MMI Reason Code" := fromRec."EOS MMI Reason Code";
                toRec."BCN MMI Typology" := fromRec."EOS MMI Typology";
                toRec."Confirmation Status" := fromRec."EOS Confirmation Status";
                toRec.Modify();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate130"()
    var
        fromRec: Record "Incoming Document";
        toRec: Record "Incoming Document";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.GetBySystemId(fromRec.SystemId);
                toRec."Customer Bank Account No." := fromRec."EOS Customer Bank Account No.";
                toRec."Customer Bank Branch No." := fromRec."EOS Customer Bank Branch No.";
                toRec."Customer IBAN" := fromRec."EOS Customer IBAN";
                toRec."Customer Id" := fromRec."EOS Customer Id";
                toRec."Customer Name" := fromRec."EOS Customer Name";
                toRec."Customer No." := fromRec."EOS Customer No.";
                toRec."Customer Phone No." := fromRec."EOS Customer Phone No.";
                toRec."Customer Purchase Order No." := fromRec."EOS Customer Purch. Order No.";
                toRec."Customer VAT Registration No." := fromRec."EOS Customer VAT Registr. No.";
                toRec."Source Type" := fromRec."EOS Source Type";
                toRec.Modify();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate156"()
    var
        fromRec: Record "Resource";
        toRec: Record "Resource";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.GetBySystemId(fromRec.SystemId);
                toRec."EOL Resource Payment Code" := fromRec."EOS Resource Payment Code";
                toRec.Modify();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate167"()
    var
        fromRec: Record "Job";
        toRec: Record "Job";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.GetBySystemId(fromRec.SystemId);
                toRec."Address For Geolocation" := fromRec."EOS Address For Geolocation";
                toRec."EOL Location Code" := fromRec."EOS Location Code";
                toRec."Job Template" := fromRec."EOS Job Template";
                toRec."Job Type" := fromRec."EOS Job Type";
                toRec."Latitude" := fromRec."EOS Latitude";
                toRec."Longitude" := fromRec."EOS Longitude";
                toRec."Service Object No." := fromRec."EOS Serv. Object No.";
                toRec."Service Task No Begin-Total" := fromRec."EOS Serv. Task No Begin-Total";
                toRec."Version No." := fromRec."EOS Version No.";
                toRec."Warranty Ending Date" := fromRec."EOS Warranty Ending Date";
                toRec.Modify();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate222"()
    var
        fromRec: Record "Ship-to Address";
        toRec: Record "Ship-to Address";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.GetBySystemId(fromRec.SystemId);
                toRec."EOL Address From Geolocation" := fromRec."EOS Address From Geolocation";
                toRec."EOL Latitude" := fromRec."EOS Latitude";
                toRec."EOL Longitude" := fromRec."EOS Longitude";
                toRec.Modify();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate242"()
    var
        fromRec: Record "Source Code Setup";
        toRec: Record "Source Code Setup";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.GetBySystemId(fromRec.SystemId);
                toRec."Statistical Account Journal" := fromRec."EOS Statistical Account Jnl.";
                toRec.Modify();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate289"()
    var
        fromRec: Record "Payment Method";
        toRec: Record "Payment Method";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.GetBySystemId(fromRec.SystemId);
                toRec."EOL Epson Payment Type" := fromRec."EOS Epson Payment Type";
                toRec.Modify();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate291"()
    var
        fromRec: Record "Shipping Agent";
        toRec: Record "Shipping Agent";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.GetBySystemId(fromRec.SystemId);
                toRec."EDI Reference ID" := fromRec."EOS EDI Reference ID";
                toRec."EDI Reference Logo" := fromRec."EOS EDI Reference Logo";
                toRec."ShippyPro Carrier" := fromRec."EOS ShippyPro Carrier";
                toRec.Modify();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate308"()
    var
        fromRec: Record "No. Series";
        toRec: Record "No. Series";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.GetBySystemId(fromRec.SystemId);
                toRec."EOL Formula Code" := fromRec."EOS Formula Code";
                toRec.Modify();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate313"()
    var
        fromRec: Record "Inventory Setup";
        toRec: Record "Inventory Setup";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.GetBySystemId(fromRec.SystemId);
                toRec."Barcode No. Series" := fromRec."EOS Barcode No. Series";
                toRec."Show Overload Error Invt. Pick" := fromRec."EOS Show Ovrl Error Invt. Pick";
                toRec."Show Overload Error Whse. Rec." := fromRec."EOS Show Ovrl Error Whse. Rec.";
                toRec."Use Automatic Barcode" := fromRec."EOS Use Automatic Barcode";
                toRec.Modify();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate314"()
    var
        fromRec: Record "Resources Setup";
        toRec: Record "Resources Setup";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.GetBySystemId(fromRec.SystemId);
                toRec."Default Base Unit Of Measure" := fromRec."EOS Def. Base Unit Of Measure";
                toRec."Default Gen. Prod. Post. Group" := fromRec."EOS Def. Gen. Prod. Post Group";
                toRec."Default Job No." := fromRec."EOS Default Job No.";
                toRec."Default Job Task No." := fromRec."EOS Default Job Task No.";
                toRec."Default Type" := fromRec."EOS Default Type";
                toRec."Default VAT Prod. Post. Group" := fromRec."EOS Def. VAT Prod. Post. Group";
                toRec."Default Work Type Code" := fromRec."EOS Default Work Type Code";
                toRec."Rounding Precision" := fromRec."EOS Rounding Precision";
                toRec."Rounding Type" := fromRec."EOS Rounding Type";
                toRec.Modify();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate315"()
    var
        fromRec: Record "Jobs Setup";
        toRec: Record "Jobs Setup";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.GetBySystemId(fromRec.SystemId);
                toRec."Default Service Loc. Code" := fromRec."EOS Default Service Loc. Code";
                toRec."Dummy Item No." := fromRec."EOS Dummy Item No.";
                toRec."Dummy Item Templ. Code" := fromRec."EOS Dummy Item Templ. Code";
                toRec."External Repair Loc. Code" := fromRec."EOS External Repair Loc. Code";
                toRec."Internal Repair Loc. Code" := fromRec."EOS Internal Repair Loc. Code";
                toRec."Job Default Location Code" := fromRec."EOS Job Default Location Code";
                toRec."Job Planning Line Loc. Source" := fromRec."EOS Job Plan. Line Loc. Source";
                toRec."Job Work Order Batch Name" := fromRec."EOS Job Work Ord. Batch Name";
                toRec."Job Work Order Posting Method" := fromRec."EOS Job Work Ord. Post. Method";
                toRec."Job Work Order Template Name" := fromRec."EOS Job Work Ord. Templ. Name";
                toRec."Service G/L Account No." := fromRec."EOS Service G/L Account No.";
                toRec."Service Item Jrnl. Batch Name" := fromRec."EOS Serv. Item Jnl Batch Name";
                toRec."Service Item Jrnl. Templ. Name" := fromRec."EOS Serv. Item Jnl Templ. Name";
                toRec."Service Order No. Series" := fromRec."EOS Service Order No. Series";
                toRec.Modify();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate323"()
    var
        fromRec: Record "VAT Business Posting Group";
        toRec: Record "VAT Business Posting Group";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.GetBySystemId(fromRec.SystemId);
                toRec."EOL Activity Code" := fromRec."EOS Activity Code";
                toRec.Modify();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate324"()
    var
        fromRec: Record "VAT Product Posting Group";
        toRec: Record "VAT Product Posting Group";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.GetBySystemId(fromRec.SystemId);
                toRec."EOL Epson Department Id" := fromRec."EOS Epson Department Id";
                toRec.Modify();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate951"()
    var
        fromRec: Record "Time Sheet Line";
        toRec: Record "Time Sheet Line";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.GetBySystemId(fromRec.SystemId);
                toRec."EOL Clock InOut Entry No." := fromRec."EOS Clock InOut Entry No.";
                toRec."EOL Job Planning Line No." := fromRec."EOS Job Planning Line No.";
                toRec."EOL Out Of Office" := fromRec."EOS Out Of Office";
                toRec."EOL Ship-to Addess Code" := fromRec."EOS Ship-to Addess Code";
                toRec."EOL Use Geolocation" := fromRec."EOS Use Geolocation";
                toRec.Modify();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate952"()
    var
        fromRec: Record "Time Sheet Detail";
        toRec: Record "Time Sheet Detail";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.GetBySystemId(fromRec.SystemId);
                toRec."EOL Clock InOut Entry No." := fromRec."EOS Clock InOut Entry No.";
                toRec.Modify();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate955"()
    var
        fromRec: Record "Time Sheet Line Archive";
        toRec: Record "Time Sheet Line Archive";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.GetBySystemId(fromRec.SystemId);
                toRec."EOL Job Planning Line No." := fromRec."EOS Job Planning Line No.";
                toRec.Modify();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate1001"()
    var
        fromRec: Record "Job Task";
        toRec: Record "Job Task";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.GetBySystemId(fromRec.SystemId);
                toRec."Assigned User Id" := fromRec."EOS Assigned User Id";
                toRec."Billable" := fromRec."EOS Billable";
                toRec."Completed" := fromRec."EOS Completed";
                toRec."Enable Service Orders" := fromRec."EOS Enable Service Orders";
                toRec."Is Service Task" := fromRec."EOS Is Service Task";
                toRec."Job Type" := fromRec."EOS Job Type";
                toRec."Markup %" := fromRec."EOS Markup %";
                toRec."Markup Budget Filter Value" := fromRec."EOS Markup Budget Filter Value";
                toRec."Markup No." := fromRec."EOS Markup No.";
                toRec."Markup Type" := fromRec."EOS Markup Type";
                toRec."Service Object Item No." := fromRec."EOS Service Object Item No.";
                toRec."Service Object No." := fromRec."EOS Service Object No.";
                toRec."Service Object Variant Code" := fromRec."EOS Service Object Var. Code";
                toRec."Service Order No." := fromRec."EOS Service Order No.";
                toRec.Modify();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate1003"()
    var
        fromRec: Record "Job Planning Line";
        toRec: Record "Job Planning Line";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.GetBySystemId(fromRec.SystemId);
                toRec."EOL Archived Sales Quote No." := fromRec."EOS Archived Sales Quote No.";
                toRec."EOL Sales Quote No." := fromRec."EOS Sales Quote No.";
                toRec."EOL Service Order No." := fromRec."EOS Service Order No.";
                toRec."EOL Your Reference" := fromRec."EOS Your Reference";
                toRec.Modify();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate1214"()
    var
        fromRec: Record "Intermediate Data Import";
        toRec: Record "Intermediate Data Import";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.GetBySystemId(fromRec.SystemId);
                toRec."ADM Data Exch. Column No." := fromRec."EOS ADM Data Exch. Column No.";
                toRec."ADM Data Exch. Def Code" := fromRec."EOS ADM Data Exch. Def Code";
                toRec."ADM Data Exch. Line Def Code" := fromRec."EOS ADM Data Exch Line D. Code";
                toRec."ADM Priority" := fromRec."EOS ADM Priority";
                toRec.Modify();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate1221"()
    var
        fromRec: Record "Data Exch. Field";
        toRec: Record "Data Exch. Field";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.GetBySystemId(fromRec.SystemId);
                toRec."ADM Invalid" := fromRec."EOS ADM Invalid";
                toRec."ADM Priority" := fromRec."EOS ADM Priority";
                toRec."ADM Processing Status" := fromRec."EOS ADM Processing Status";
                toRec.Modify();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate1223"()
    var
        fromRec: Record "Data Exch. Column Def";
        toRec: Record "Data Exch. Column Def";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.GetBySystemId(fromRec.SystemId);
                toRec."ADM Matrix Column" := fromRec."EOS ADM Matrix Column";
                toRec.Modify();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate1225"()
    var
        fromRec: Record "Data Exch. Field Mapping";
        toRec: Record "Data Exch. Field Mapping";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.GetBySystemId(fromRec.SystemId);
                toRec."ADM Field Notes" := fromRec."EOS ADM Field Notes";
                toRec."ADM Field Type" := fromRec."EOS ADM Field Type";
                toRec."ADM Increment By Key" := fromRec."EOS ADM Increment By Key";
                toRec."ADM Increment Step" := fromRec."EOS ADM Increment Step";
                toRec."ADM Mandatory" := fromRec."EOS ADM Mandatory";
                toRec."ADM Mapping Category Code" := fromRec."EOS ADM Mapping Category Code";
                toRec."ADM Mapping Optional" := fromRec."EOS ADM Mapping Optional";
                toRec."ADM Matrix Column" := fromRec."EOS ADM Matrix Column";
                toRec."ADM Skip Category Suggestion" := fromRec."EOS ADM Skip Category Suggest.";
                toRec."ADM Skip Validate" := fromRec."EOS ADM Skip Validate";
                toRec.Modify();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate5050"()
    var
        fromRec: Record "Contact";
        toRec: Record "Contact";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.GetBySystemId(fromRec.SystemId);
                toRec."EOL Import EDI Document" := fromRec."EOS Import EDI Document";
                toRec.Modify();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate5107"()
    var
        fromRec: Record "Sales Header Archive";
        toRec: Record "Sales Header Archive";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.GetBySystemId(fromRec.SystemId);
                toRec."BCN MMI Amount Including VAT" := fromRec."EOS MMI Amount Including VAT";
                toRec."BCN MMI Base Amount" := fromRec."EOS MMI Base Amount";
                toRec."BCN MMI Document No." := fromRec."EOS MMI Document No.";
                toRec."BCN MMI Entry No." := fromRec."EOS MMI Entry No.";
                toRec."BCN MMI Reason Code" := fromRec."EOS MMI Reason Code";
                toRec."BCN MMI Typology" := fromRec."EOS MMI Typology";
                toRec."Confirmation Status" := fromRec."EOS Confirmation Status";
                toRec."EOL Job No." := fromRec."EOS Job No.";
                toRec."EOL Point Of Sale Order" := fromRec."EOS Point Of Sale Order";
                toRec."ShippyPro Shipping Content" := fromRec."EOS ShippyPro Shipping Content";
                toRec."ShippyPro Shipping Notes" := fromRec."EOS ShippyPro Shipping Notes";
                toRec.Modify();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate5108"()
    var
        fromRec: Record "Sales Line Archive";
        toRec: Record "Sales Line Archive";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.GetBySystemId(fromRec.SystemId);
                toRec."Base Price" := fromRec."EOS Base Price";
                toRec."Calculated Profit" := fromRec."EOS Calculated Profit";
                toRec."Calculated Profit %" := fromRec."EOS Calculated Profit %";
                toRec."Calculated Unit Price" := fromRec."EOS Calculated Unit Price";
                toRec."Direct Unit Cost" := fromRec."EOS Direct Unit Cost";
                toRec."Mark-Up %" := fromRec."EOS Mark-Up %";
                toRec."Notes" := fromRec."EOS Notes";
                toRec."Source Type" := fromRec."EOS Source Type";
                toRec."Vendor No." := fromRec."EOS Vendor No.";
                toRec.Modify();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate5109"()
    var
        fromRec: Record "Purchase Header Archive";
        toRec: Record "Purchase Header Archive";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.GetBySystemId(fromRec.SystemId);
                toRec."BCN MMI Amount Including VAT" := fromRec."EOS MMI Amount Including VAT";
                toRec."BCN MMI Base Amount" := fromRec."EOS MMI Base Amount";
                toRec."BCN MMI Document No." := fromRec."EOS MMI Document No.";
                toRec."BCN MMI Entry No." := fromRec."EOS MMI Entry No.";
                toRec."BCN MMI Reason Code" := fromRec."EOS MMI Reason Code";
                toRec."BCN MMI Typology" := fromRec."EOS MMI Typology";
                toRec."Confirmation Status" := fromRec."EOS Confirmation Status";
                toRec.Modify();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate5700"()
    var
        fromRec: Record "Stockkeeping Unit";
        toRec: Record "Stockkeeping Unit";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.GetBySystemId(fromRec.SystemId);
                toRec."EOL Global Inventory" := fromRec."EOS Global Inventory";
                toRec."EOL Inventory" := fromRec."EOS Inventory";
                toRec."EOL Inventory Excl. In Orders" := fromRec."EOS Inventory Excl. In Orders";
                toRec."EOL Qty On Purch. Order" := fromRec."EOS Qty On Purch. Order";
                toRec."EOL Qty On Sales Order" := fromRec."EOS Qty On Sales Order";
                toRec.Modify();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate5718"()
    var
        fromRec: Record "Nonstock Item";
        toRec: Record "Nonstock Item";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.GetBySystemId(fromRec.SystemId);
                toRec."Purchase Cost" := fromRec."EOS Purchase Cost";
                toRec."Purchase Quantity" := fromRec."EOS Purchase Quantity";
                toRec."Purchase Unit Of Measure Code" := fromRec."EOS Purch Unit Of Measure Code";
                toRec."Qty. Per Unit Of Measure" := fromRec."EOS Qty. Per Unit Of Measure";
                toRec."Secondary Unit Of Measure Code" := fromRec."EOS Sec. Unit Of Measure Code";
                toRec.Modify();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate5744"()
    var
        fromRec: Record "Transfer Shipment Header";
        toRec: Record "Transfer Shipment Header";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.GetBySystemId(fromRec.SystemId);
                toRec."EOL Additional Note" := fromRec."EOS Additional Note";
                toRec."EOL Goods Aspect" := fromRec."EOS Goods Aspect";
                toRec."EOL Goods Aspect Code" := fromRec."EOS Goods Aspect Code";
                toRec."EOL Shipment Method Descr." := fromRec."EOS Shipment Method Descr.";
                toRec."EOL Shipping Agent Address" := fromRec."EOS Shipping Agent Address";
                toRec."EOL Shipping Agent Name" := fromRec."EOS Shipping Agent Name";
                toRec."EOL Total Gross Weight" := fromRec."EOS Total Gross Weight";
                toRec."EOL Total Net Weight" := fromRec."EOS Total Net Weight";
                toRec."EOL Total Packs" := fromRec."EOS Total Packs";
                toRec."EOL Total Volume" := fromRec."EOS Total Volume";
                toRec."EOL Transport Method Descr." := fromRec."EOS Transport Method Descr.";
                toRec."EOL Transport Performed by.." := fromRec."EOS Transport Performed by..";
                toRec."EOL Transport Reason" := fromRec."EOS Transport Reason";
                toRec."EOL Transport Reason Code" := fromRec."EOS Transport Reason Code";
                toRec.Modify();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate5790"()
    var
        fromRec: Record "Shipping Agent Services";
        toRec: Record "Shipping Agent Services";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.GetBySystemId(fromRec.SystemId);
                toRec."EDI Transcoding code" := fromRec."EOS EDI Transcoding code";
                toRec."ShippyPro Carrier Service" := fromRec."EOS ShippyPro Carrier Service";
                toRec.Modify();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate5850"()
    var
        fromRec: Record "Invt. Document Header";
        toRec: Record "Invt. Document Header";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.GetBySystemId(fromRec.SystemId);
                toRec."EOL Additional Note" := fromRec."EOS Additional Note";
                toRec."EOL Goods Aspect" := fromRec."EOS Goods Aspect";
                toRec."EOL Gross Weight" := fromRec."EOS Gross Weight";
                toRec."EOL Net Weight" := fromRec."EOS Net Weight";
                toRec."EOL Parcels No." := fromRec."EOS Parcels No.";
                toRec."EOL Reason Code" := fromRec."EOS Reason Code";
                toRec."EOL Reference Contact No." := fromRec."EOS Reference Contact No.";
                toRec."EOL Reference No." := fromRec."EOS Reference No.";
                toRec."EOL Reference Type" := fromRec."EOS Reference Type";
                toRec."EOL Ship. Agent Service Code" := fromRec."EOS Ship. Agent Service Code";
                toRec."EOL Shipment Method Code" := fromRec."EOS Shipment Method Code";
                toRec."EOL Shipping Agent Code" := fromRec."EOS Shipping Agent Code";
                toRec."EOL Ship-to Reference Code" := fromRec."EOS Ship-to Reference Code";
                toRec."EOL Transport Performed By" := fromRec."EOS Transport Performed By";
                toRec."EOL Volume" := fromRec."EOS Volume";
                toRec.Modify();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate5854"()
    var
        fromRec: Record "Invt. Shipment Header";
        toRec: Record "Invt. Shipment Header";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.GetBySystemId(fromRec.SystemId);
                toRec."EOL Additional Note" := fromRec."EOS Additional Note";
                toRec."EOL Goods Aspect" := fromRec."EOS Goods Aspect";
                toRec."EOL Gross Weight" := fromRec."EOS Gross Weight";
                toRec."EOL Net Weight" := fromRec."EOS Net Weight";
                toRec."EOL Parcels No." := fromRec."EOS Parcels No.";
                toRec."EOL Reason Code" := fromRec."EOS Reason Code";
                toRec."EOL Reference Contact No." := fromRec."EOS Reference Contact No.";
                toRec."EOL Reference No." := fromRec."EOS Reference No.";
                toRec."EOL Reference Type" := fromRec."EOS Reference Type";
                toRec."EOL Ship. Agent Service Code" := fromRec."EOS Ship. Agent Service Code";
                toRec."EOL Shipment Method Code" := fromRec."EOS Shipment Method Code";
                toRec."EOL Shipping Agent Code" := fromRec."EOS Shipping Agent Code";
                toRec."EOL Ship-to Reference Code" := fromRec."EOS Ship-to Reference Code";
                toRec."EOL Transport Performed By" := fromRec."EOS Transport Performed By";
                toRec."EOL Volume" := fromRec."EOS Volume";
                toRec.Modify();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate6504"()
    var
        fromRec: Record "Serial No. Information";
        toRec: Record "Serial No. Information";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.GetBySystemId(fromRec.SystemId);
                toRec."Customer No." := fromRec."EOS Customer No.";
                toRec."Warranty Ending Date" := fromRec."EOS Warranty Ending Date";
                toRec.Modify();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate6650"()
    var
        fromRec: Record "Return Shipment Header";
        toRec: Record "Return Shipment Header";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.GetBySystemId(fromRec.SystemId);
                toRec."BCN MMI Amount Including VAT" := fromRec."EOS MMI Amount Including VAT";
                toRec."BCN MMI Base Amount" := fromRec."EOS MMI Base Amount";
                toRec."BCN MMI Document No." := fromRec."EOS MMI Document No.";
                toRec."BCN MMI Entry No." := fromRec."EOS MMI Entry No.";
                toRec."BCN MMI Reason Code" := fromRec."EOS MMI Reason Code";
                toRec."BCN MMI Typology" := fromRec."EOS MMI Typology";
                toRec."EOL Additional Note" := fromRec."EOS Additional Note";
                toRec."EOL Goods Aspect" := fromRec."EOS Goods Aspect";
                toRec."EOL Goods Aspect Code" := fromRec."EOS Goods Aspect Code";
                toRec."EOL Shipment Method Descr." := fromRec."EOS Shipment Method Descr.";
                toRec."EOL Shipping Agent Address" := fromRec."EOS Shipping Agent Address";
                toRec."EOL Shipping Agent Name" := fromRec."EOS Shipping Agent Name";
                toRec."EOL Total Gross Weight" := fromRec."EOS Total Gross Weight";
                toRec."EOL Total Net Weight" := fromRec."EOS Total Net Weight";
                toRec."EOL Total Packs" := fromRec."EOS Total Packs";
                toRec."EOL Total Volume" := fromRec."EOS Total Volume";
                toRec."EOL Transport Method Descr." := fromRec."EOS Transport Method Descr.";
                toRec."EOL Transport Performed by.." := fromRec."EOS Transport Performed by..";
                toRec."EOL Transport Reason" := fromRec."EOS Transport Reason";
                toRec."EOL Transport Reason Code" := fromRec."EOS Transport Reason Code";
                toRec.Modify();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate6660"()
    var
        fromRec: Record "Return Receipt Header";
        toRec: Record "Return Receipt Header";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.GetBySystemId(fromRec.SystemId);
                toRec."BCN MMI Amount Including VAT" := fromRec."EOS MMI Amount Including VAT";
                toRec."BCN MMI Base Amount" := fromRec."EOS MMI Base Amount";
                toRec."BCN MMI Document No." := fromRec."EOS MMI Document No.";
                toRec."BCN MMI Entry No." := fromRec."EOS MMI Entry No.";
                toRec."BCN MMI Reason Code" := fromRec."EOS MMI Reason Code";
                toRec."BCN MMI Typology" := fromRec."EOS MMI Typology";
                toRec."EOL Job No." := fromRec."EOS Job No.";
                toRec.Modify();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate7301"()
    var
        fromRec: Record "Warehouse Employee";
        toRec: Record "Warehouse Employee";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.GetBySystemId(fromRec.SystemId);
                toRec."Is Default Job Location" := fromRec."EOS Is Default Job Location";
                toRec.Modify();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate8623"()
    var
        fromRec: Record "Config. Package";
        toRec: Record "Config. Package";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.GetBySystemId(fromRec.SystemId);
                toRec."EOL001 SoSmart Id" := fromRec."EOS SoSmart Id";
                toRec.Modify();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate12104"()
    var
        fromRec: Record "Withhold Code";
        toRec: Record "Withhold Code";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.GetBySystemId(fromRec.SystemId);
                toRec."WHT EDoc. Catalog Code" := fromRec."EOS WHT EDoc. Catalog Code";
                toRec.Modify();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate50180"()
    var
        fromRec: Record "EOL OnBoarding Company Setup";
        toRec: Record "EOS OnBoarding Company Setup";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.Init();
                toRec."ABI" := fromRec."ABI";
                toRec."CAB" := fromRec."CAB";
                toRec."Completed" := fromRec."Completed";
                toRec."Corporate Capital" := fromRec."Corporate Capital";
                toRec."FD Country/Region Code" := fromRec."FD Country/Region Code";
                toRec."Is Master Company" := fromRec."Is Master Company";
                toRec."IXFE - Dont Process Data Pers." := fromRec."IXFE - Dont Process Data Pers.";
                toRec."IXFE - Process Data Personal" := fromRec."IXFE - Process Data Personal";
                toRec."IXFE E-Mail UserName" := fromRec."IXFE E-Mail UserName";
                toRec."IXFE Fiscal Year End Date" := fromRec."IXFE Fiscal Year End Date";
                toRec."IXFE Fiscal Year Start Date" := fromRec."IXFE Fiscal Year Start Date";
                toRec."IXFE Psw" := fromRec."IXFE Psw";
                toRec."IXFE Storage Email" := fromRec."IXFE Storage Email";
                toRec."IXFE Storage Fiscal Code" := fromRec."IXFE Storage Fiscal Code";
                toRec."IXFE Storage Last Name" := fromRec."IXFE Storage Last Name";
                toRec."IXFE Storage Name" := fromRec."IXFE Storage Name";
                toRec."IXFE Storage Nationality" := fromRec."IXFE Storage Nationality";
                toRec."IXFE User Address" := fromRec."IXFE User Address";
                toRec."IXFE User Birth City" := fromRec."IXFE User Birth City";
                toRec."IXFE User Birth Country" := fromRec."IXFE User Birth Country";
                toRec."IXFE User BirthDate" := fromRec."IXFE User BirthDate";
                toRec."IXFE User City" := fromRec."IXFE User City";
                toRec."IXFE User City of Residence" := fromRec."IXFE User City of Residence";
                toRec."IXFE User First Name" := fromRec."IXFE User First Name";
                toRec."IXFE User Fiscal Code" := fromRec."IXFE User Fiscal Code";
                toRec."IXFE User Gender" := fromRec."IXFE User Gender";
                toRec."IXFE User Last Name" := fromRec."IXFE User Last Name";
                toRec."IXFE User Nationality" := fromRec."IXFE User Nationality";
                toRec."IXFE VAT Declaration Date" := fromRec."IXFE VAT Declaration Date";
                toRec."PEC Mail" := fromRec."PEC Mail";
                toRec."Person BirthDate" := fromRec."Person BirthDate";
                toRec."Person Birthplace" := fromRec."Person Birthplace";
                toRec."Person First Name" := fromRec."Person First Name";
                toRec."Person Fiscal Code" := fromRec."Person Fiscal Code";
                toRec."Person Last Name" := fromRec."Person Last Name";
                toRec."Person Nationality" := fromRec."Person Nationality";
                toRec."Primary Key" := fromRec."Primary Key";
                toRec."Report Data On Left" := fromRec."Report Data On Left";
                if fromRec."Report Footer Logo".HasValue() then begin
                    fromRec.CalcFields("Report Footer Logo");
                    fromRec."Report Footer Logo".CreateInStream(IStream);
                    toRec."Report Footer Logo".CreateOutStream(OStream);
                    CopyStream(OStream, IStream);
                end;
                if fromRec."Report Header Logo".HasValue() then begin
                    fromRec.CalcFields("Report Header Logo");
                    fromRec."Report Header Logo".CreateInStream(IStream);
                    toRec."Report Header Logo".CreateOutStream(OStream);
                    CopyStream(OStream, IStream);
                end;
                toRec."Settlement Status" := fromRec."Settlement Status";
                toRec.Insert();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate50181"()
    var
        fromRec: Record "EOL Job User";
        toRec: Record "EOS Job User";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.Init();
                toRec."Job No." := fromRec."Job No.";
                toRec."User ID" := fromRec."User ID";
                toRec.Insert();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate50182"()
    var
        fromRec: Record "EOL Goods Aspect";
        toRec: Record "EOS Goods Aspect";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.Init();
                toRec."EOL Code" := fromRec."EOL Code";
                toRec."EOL Description" := fromRec."EOL Description";
                toRec."Height" := fromRec."Height";
                toRec."Length" := fromRec."Length";
                toRec."Weight" := fromRec."Weight";
                toRec."Width" := fromRec."Width";
                toRec.Insert();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate50183"()
    var
        fromRec: Record "EOL Setup Operation";
        toRec: Record "EOS Setup Operation";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.Init();
                toRec."Autom. Create Items From CAD" := fromRec."Autom. Create Items From CAD";
                toRec."Base Unit Of Measure" := fromRec."Base Unit Of Measure";
                toRec."BOM Imp. Default Item Templ." := fromRec."BOM Imp. Default Item Templ.";
                toRec."Check Dist. From Coordinates" := fromRec."Check Dist. From Coordinates";
                toRec."Company Payment Code" := fromRec."Company Payment Code";
                toRec."Def. Purch. Order Appr. Cat." := fromRec."Def. Purch. Order Appr. Cat.";
                toRec."Def. Purch. Quote Appr. Cat." := fromRec."Def. Purch. Quote Appr. Cat.";
                toRec."Disable Average Entries Cost" := fromRec."Disable Average Entries Cost";
                toRec."EDI Order Reason Code" := fromRec."EDI Order Reason Code";
                toRec."EDI Order Typology" := fromRec."EDI Order Typology";
                toRec."EDI Traking No. Series Code" := fromRec."EDI Traking No. Series Code";
                toRec."Enable XML Sales Doc. Import" := fromRec."Enable XML Sales Doc. Import";
                toRec."EOL Hide Quote Shp. Date Warn." := fromRec."EOL Hide Quote Shp. Date Warn.";
                toRec."Epson Base Address" := fromRec."Epson Base Address";
                toRec."Fiscal Printer Test Mode" := fromRec."Fiscal Printer Test Mode";
                toRec."HR Export Time Sheet" := fromRec."HR Export Time Sheet";
                toRec."HR Geolocation Enabled" := fromRec."HR Geolocation Enabled";
                toRec."HR Job Geo. Web Profile Code" := fromRec."HR Job Geo. Web Profile Code";
                toRec."HR Job Search Radius" := fromRec."HR Job Search Radius";
                toRec."Import EDI Orders" := fromRec."Import EDI Orders";
                toRec."Inherit Activity Code (Sales)" := fromRec."Inherit Activity Code (Sales)";
                toRec."Inventory Req. Batch Name" := fromRec."Inventory Req. Batch Name";
                toRec."Inventory Req. Template Name" := fromRec."Inventory Req. Template Name";
                toRec."Invoice Descriptive Line" := fromRec."Invoice Descriptive Line";
                toRec."Margin Calculation Method" := fromRec."Margin Calculation Method";
                toRec."Nonstock Item Templ. Code" := fromRec."Nonstock Item Templ. Code";
                toRec."Post Clock InOut Min Distance" := fromRec."Post Clock InOut Min Distance";
                toRec."Primary Key" := fromRec."Primary Key";
                toRec."Private Customer No." := fromRec."Private Customer No.";
                toRec."Sales Margin Enabled" := fromRec."Sales Margin Enabled";
                toRec."Shipping Descriptive Line" := fromRec."Shipping Descriptive Line";
                toRec."Use Epson Fiscal Printer" := fromRec."Use Epson Fiscal Printer";
                toRec."Use Job Row Auto Budget Calc." := fromRec."Use Job Row Auto Budget Calc.";
                toRec."Xml Format" := fromRec."Xml Format";
                toRec."XML Sales Inv. Data Process No" := fromRec."XML Sales Inv. Data Process No";
                toRec."XML Sales Inv. Reason Code" := fromRec."XML Sales Inv. Reason Code";
                toRec."XML Sales Inv. Typology" := fromRec."XML Sales Inv. Typology";
                toRec.Insert();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate50184"()
    var
        fromRec: Record "EOL Incoming Peppol Document";
        toRec: Record "EOS Incoming Peppol Document";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.Init();
                toRec."Amount Excl. VAT" := fromRec."Amount Excl. VAT";
                toRec."Amount Incl. VAT" := fromRec."Amount Incl. VAT";
                toRec."Created By User ID" := fromRec."Created By User ID";
                toRec."Created Date-Time" := fromRec."Created Date-Time";
                toRec."Created Doc. Error Msg. Type" := fromRec."Created Doc. Error Msg. Type";
                toRec."Currency Code" := fromRec."Currency Code";
                toRec."Data Exchange Type" := fromRec."Data Exchange Type";
                toRec."Description" := fromRec."Description";
                toRec."Document Date" := fromRec."Document Date";
                toRec."Document No." := fromRec."Document No.";
                toRec."Document Type" := fromRec."Document Type";
                toRec."Due Date" := fromRec."Due Date";
                toRec."Entry No." := fromRec."Entry No.";
                toRec."Job Queue Entry ID" := fromRec."Job Queue Entry ID";
                toRec."Job Queue Status" := fromRec."Job Queue Status";
                toRec."Last Date-Time Modified" := fromRec."Last Date-Time Modified";
                toRec."Last Modified By User ID" := fromRec."Last Modified By User ID";
                toRec."OCR Data Corrected" := fromRec."OCR Data Corrected";
                toRec."OCR Process Finished" := fromRec."OCR Process Finished";
                toRec."OCR Service Doc. Template Code" := fromRec."OCR Service Doc. Template Code";
                toRec."OCR Status" := fromRec."OCR Status";
                toRec."OCR Track ID" := fromRec."OCR Track ID";
                toRec."Order No." := fromRec."Order No.";
                toRec."Posted" := fromRec."Posted";
                toRec."Posted Date-Time" := fromRec."Posted Date-Time";
                toRec."Posting Date" := fromRec."Posting Date";
                toRec."Processed" := fromRec."Processed";
                toRec."Related Record ID" := fromRec."Related Record ID";
                toRec."Released" := fromRec."Released";
                toRec."Released By User ID" := fromRec."Released By User ID";
                toRec."Released Date-Time" := fromRec."Released Date-Time";
                toRec."Source Bank Account No." := fromRec."Source Bank Account No.";
                toRec."Source Bank Branch No." := fromRec."Source Bank Branch No.";
                toRec."Source IBAN" := fromRec."Source IBAN";
                toRec."Source Id" := fromRec."Source Id";
                toRec."Source Invoice No." := fromRec."Source Invoice No.";
                toRec."Source Name" := fromRec."Source Name";
                toRec."Source No." := fromRec."Source No.";
                toRec."Source Phone No." := fromRec."Source Phone No.";
                toRec."Source Type" := fromRec."Source Type";
                toRec."Source VAT Registration No." := fromRec."Source VAT Registration No.";
                toRec."Status" := fromRec."Status";
                toRec."URL" := fromRec."URL";
                toRec."VAT Amount" := fromRec."VAT Amount";
                toRec.Insert();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate50185"()
    var
        fromRec: Record "EOL Warehouse Movement Entry";
        toRec: Record "EOS Warehouse Movement Entry";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.Init();
                toRec."Barcode" := fromRec."Barcode";
                toRec."Entry No." := fromRec."Entry No.";
                toRec."Item No." := fromRec."Item No.";
                toRec."Quantity" := fromRec."Quantity";
                toRec."Source Batch Name" := fromRec."Source Batch Name";
                toRec."Source ID" := fromRec."Source ID";
                toRec."Source Prod. Order Line" := fromRec."Source Prod. Order Line";
                toRec."Source Ref. Line No." := fromRec."Source Ref. Line No.";
                toRec."Source SubType" := fromRec."Source SubType";
                toRec."Source Type" := fromRec."Source Type";
                toRec."Whse. Source Subtype" := fromRec."Whse. Source Subtype";
                toRec.Insert();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate50186"()
    var
        fromRec: Record "EOL Exch. Rates Setup";
        toRec: Record "EOS Exch. Rates Setup";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.Init();
                toRec."Job Queue Entry ID" := fromRec."Job Queue Entry ID";
                toRec."Planned Import Exchange Rate" := fromRec."Planned Import Exchange Rate";
                toRec."Primary Key" := fromRec."Primary Key";
                toRec.Insert();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate50187"()
    var
        fromRec: Record "EOL Payment Export Setup";
        toRec: Record "EOS Payment Export Setup";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.Init();
                toRec."Absence" := fromRec."Absence";
                toRec."Generate Double Movement" := fromRec."Generate Double Movement";
                toRec."Official Supporting Code" := fromRec."Official Supporting Code";
                toRec."Registration Type" := fromRec."Registration Type";
                toRec."Work Type" := fromRec."Work Type";
                toRec.Insert();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate50188"()
    var
        fromRec: Record "EOL Application Setup";
        toRec: Record "EOS Application Setup";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.Init();
                toRec."Allow Sending EDoc" := fromRec."Allow Sending EDoc";
                toRec."Create Before Start Cost" := fromRec."Create Before Start Cost";
                toRec."Detailed Payments Enabled" := fromRec."Detailed Payments Enabled";
                toRec."Enasarco EDoc. Category Code" := fromRec."Enasarco EDoc. Category Code";
                toRec."Enasarco Free-Lance %" := fromRec."Enasarco Free-Lance %";
                toRec."Enasarco Payment Reason" := fromRec."Enasarco Payment Reason";
                toRec."Primary Key" := fromRec."Primary Key";
                toRec."Sales Withholding Enabled" := fromRec."Sales Withholding Enabled";
                toRec."Skip Sales Order Delete" := fromRec."Skip Sales Order Delete";
                toRec."Withholding Payment Reason" := fromRec."Withholding Payment Reason";
                toRec."Withholding Tax Code" := fromRec."Withholding Tax Code";
                if fromRec."Wizard Logo".HasValue() then begin
                    if TenantMedia.Get(fromRec."Wizard Logo") then begin
                        TenantMedia.CalcFields(Content);
                        if TenantMedia.Content.HasValue() then begin
                            fromRec."Wizard Logo".CreateInStream(IStream);
                            "
                        toRec."Wizard Logo".ImportStream(IStream, TenantMedia.Description, TenantMedia."Mime Type");
                        end;
                    end;
                end;
                toRec.Insert();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate50189"()
    var
        fromRec: Record "EOL Import Profile";
        toRec: Record "EOS Import Profile";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.Init();
                toRec."Availability import location" := fromRec."Availability import location";
                toRec."Base Unit Of Measure" := fromRec."Base Unit Of Measure";
                toRec."Batch import csv availability" := fromRec."Batch import csv availability";
                toRec."Code" := fromRec."Code";
                toRec."Create" := fromRec."Create";
                toRec."CSV Characters To Trim" := fromRec."CSV Characters To Trim";
                toRec."CSV Column Separator" := fromRec."CSV Column Separator";
                toRec."CSV Start From Line" := fromRec."CSV Start From Line";
                toRec."Data Type" := fromRec."Data Type";
                toRec."Default Item Template" := fromRec."Default Item Template";
                toRec."Description" := fromRec."Description";
                toRec."Enabled" := fromRec."Enabled";
                toRec."File Extension Filter" := fromRec."File Extension Filter";
                toRec."Object ID" := fromRec."Object ID";
                toRec."Object Type" := fromRec."Object Type";
                toRec."Type" := fromRec."Type";
                toRec."Use work date" := fromRec."Use work date";
                toRec."Worksheet import availability" := fromRec."Worksheet import availability";
                toRec.Insert();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate50190"()
    var
        fromRec: Record "EOL Sales Withh. Contribution";
        toRec: Record "EOS Sales Withh. Contribution";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.Init();
                toRec."Base - Excluded Amount" := fromRec."Base - Excluded Amount";
                toRec."Company Amount" := fromRec."Company Amount";
                toRec."Contribution Base" := fromRec."Contribution Base";
                toRec."Currency Code" := fromRec."Currency Code";
                toRec."Date Related" := fromRec."Date Related";
                toRec."Document Type" := fromRec."Document Type";
                toRec."Enasarco Amount" := fromRec."Enasarco Amount";
                toRec."Enasarco EDoc. Catalog Code" := fromRec."Enasarco EDoc. Catalog Code";
                toRec."Enasarco Free-Lance %" := fromRec."Enasarco Free-Lance %";
                toRec."Enasarco Free-Lance Amount" := fromRec."Enasarco Free-Lance Amount";
                toRec."Enasarco Payment Reason" := fromRec."Enasarco Payment Reason";
                toRec."Free-Lance %" := fromRec."Free-Lance %";
                toRec."Free-Lance Amount" := fromRec."Free-Lance Amount";
                toRec."Gross Amount" := fromRec."Gross Amount";
                toRec."INAIL Code" := fromRec."INAIL Code";
                toRec."INAIL Company Amount" := fromRec."INAIL Company Amount";
                toRec."INAIL Contribution Base" := fromRec."INAIL Contribution Base";
                toRec."INAIL Free-Lance %" := fromRec."INAIL Free-Lance %";
                toRec."INAIL Free-Lance Amount" := fromRec."INAIL Free-Lance Amount";
                toRec."INAIL Gross Amount" := fromRec."INAIL Gross Amount";
                toRec."INAIL Non Taxable Amount" := fromRec."INAIL Non Taxable Amount";
                toRec."INAIL Per Mil" := fromRec."INAIL Per Mil";
                toRec."INAIL Total Amount" := fromRec."INAIL Total Amount";
                toRec."No." := fromRec."No.";
                toRec."Non Taxable Amount" := fromRec."Non Taxable Amount";
                toRec."Non Taxable Amount %" := fromRec."Non Taxable Amount %";
                toRec."Non Taxable Amount By Treaty" := fromRec."Non Taxable Amount By Treaty";
                toRec."Payable Amount" := fromRec."Payable Amount";
                toRec."Payment Date" := fromRec."Payment Date";
                toRec."Soc.Sec.Non Taxable Amount" := fromRec."Soc.Sec.Non Taxable Amount";
                toRec."Social Security %" := fromRec."Social Security %";
                toRec."Social Security Code" := fromRec."Social Security Code";
                toRec."Taxable Base" := fromRec."Taxable Base";
                toRec."Total Amount" := fromRec."Total Amount";
                toRec."Total Social Security Amount" := fromRec."Total Social Security Amount";
                toRec."WHT Amount Manual" := fromRec."WHT Amount Manual";
                toRec."WHT EDoc. Catalog Code" := fromRec."WHT EDoc. Catalog Code";
                toRec."WHT Payment Reason" := fromRec."WHT Payment Reason";
                toRec."Withholding Tax %" := fromRec."Withholding Tax %";
                toRec."Withholding Tax Amount" := fromRec."Withholding Tax Amount";
                toRec."Withholding Tax Code" := fromRec."Withholding Tax Code";
                toRec.Insert();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate50191"()
    var
        fromRec: Record "EOL Posted Sales WHT";
        toRec: Record "EOS Posted Sales WHT";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.Init();
                toRec."Base - Excluded Amount" := fromRec."Base - Excluded Amount";
                toRec."Company Amount" := fromRec."Company Amount";
                toRec."Contribution Base" := fromRec."Contribution Base";
                toRec."Currency Code" := fromRec."Currency Code";
                toRec."Date Related" := fromRec."Date Related";
                toRec."Document Type" := fromRec."Document Type";
                toRec."Enasarco Amount" := fromRec."Enasarco Amount";
                toRec."Enasarco EDoc. Catalog Code" := fromRec."Enasarco EDoc. Catalog Code";
                toRec."Enasarco Free-Lance %" := fromRec."Enasarco Free-Lance %";
                toRec."Enasarco Free-Lance Amount" := fromRec."Enasarco Free-Lance Amount";
                toRec."Enasarco Payment Reason" := fromRec."Enasarco Payment Reason";
                toRec."Free-Lance %" := fromRec."Free-Lance %";
                toRec."Free-Lance Amount" := fromRec."Free-Lance Amount";
                toRec."Gross Amount" := fromRec."Gross Amount";
                toRec."INAIL Code" := fromRec."INAIL Code";
                toRec."INAIL Company Amount" := fromRec."INAIL Company Amount";
                toRec."INAIL Contribution Base" := fromRec."INAIL Contribution Base";
                toRec."INAIL Free-Lance %" := fromRec."INAIL Free-Lance %";
                toRec."INAIL Free-Lance Amount" := fromRec."INAIL Free-Lance Amount";
                toRec."INAIL Gross Amount" := fromRec."INAIL Gross Amount";
                toRec."INAIL Non Taxable Amount" := fromRec."INAIL Non Taxable Amount";
                toRec."INAIL Per Mil" := fromRec."INAIL Per Mil";
                toRec."INAIL Total Amount" := fromRec."INAIL Total Amount";
                toRec."No." := fromRec."No.";
                toRec."Non Taxable Amount" := fromRec."Non Taxable Amount";
                toRec."Non Taxable Amount %" := fromRec."Non Taxable Amount %";
                toRec."Non Taxable Amount By Treaty" := fromRec."Non Taxable Amount By Treaty";
                toRec."Payable Amount" := fromRec."Payable Amount";
                toRec."Payment Date" := fromRec."Payment Date";
                toRec."Soc.Sec.Non Taxable Amount" := fromRec."Soc.Sec.Non Taxable Amount";
                toRec."Social Security %" := fromRec."Social Security %";
                toRec."Social Security Code" := fromRec."Social Security Code";
                toRec."Taxable Base" := fromRec."Taxable Base";
                toRec."Total Amount" := fromRec."Total Amount";
                toRec."Total Social Security Amount" := fromRec."Total Social Security Amount";
                toRec."WHT Amount Manual" := fromRec."WHT Amount Manual";
                toRec."WHT EDoc. Catalog Code" := fromRec."WHT EDoc. Catalog Code";
                toRec."WHT Payment Reason" := fromRec."WHT Payment Reason";
                toRec."Withholding Tax %" := fromRec."Withholding Tax %";
                toRec."Withholding Tax Amount" := fromRec."Withholding Tax Amount";
                toRec."Withholding Tax Code" := fromRec."Withholding Tax Code";
                toRec.Insert();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate50192"()
    var
        fromRec: Record "EOL Parcel";
        toRec: Record "EOS Parcel";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.Init();
                toRec."Entry No." := fromRec."Entry No.";
                toRec."Goods Aspect Code" := fromRec."Goods Aspect Code";
                toRec."Height" := fromRec."Height";
                toRec."Length" := fromRec."Length";
                toRec."New Order ID" := fromRec."New Order ID";
                toRec."Source ID" := fromRec."Source ID";
                toRec."Source Line No." := fromRec."Source Line No.";
                toRec."Source Subtype" := fromRec."Source Subtype";
                toRec."Source Type" := fromRec."Source Type";
                toRec."Tracking No." := fromRec."Tracking No.";
                toRec."Web Entry No." := fromRec."Web Entry No.";
                toRec."Weight" := fromRec."Weight";
                toRec."Width" := fromRec."Width";
                toRec.Insert();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate50193"()
    var
        fromRec: Record "EOL ShippyPro Carrier";
        toRec: Record "EOS ShippyPro Carrier";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.Init();
                toRec."Description" := fromRec."Description";
                toRec."Logo" := fromRec."Logo";
                toRec."Name" := fromRec."Name";
                toRec."Reference ID" := fromRec."Reference ID";
                toRec.Insert();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate50194"()
    var
        fromRec: Record "EOL ShippyPro Carrier Service";
        toRec: Record "EOS ShippyPro Carrier Service";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.Init();
                toRec."Carrier Name" := fromRec."Carrier Name";
                toRec."Service" := fromRec."Service";
                toRec.Insert();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate50195"()
    var
        fromRec: Record "EOL ShippyPro Setup";
        toRec: Record "EOS ShippyPro Setup";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.Init();
                toRec."API Key" := fromRec."API Key";
                toRec."AutoMap Shipping Agent" := fromRec."AutoMap Shipping Agent";
                toRec."Base URL" := fromRec."Base URL";
                toRec."Enabled" := fromRec."Enabled";
                toRec."Primary Key" := fromRec."Primary Key";
                toRec."Sender City" := fromRec."Sender City";
                toRec."Sender Country" := fromRec."Sender Country";
                toRec."Sender E-Mail" := fromRec."Sender E-Mail";
                toRec."Sender Name" := fromRec."Sender Name";
                toRec."Sender Phone No." := fromRec."Sender Phone No.";
                toRec."Sender Postal Code" := fromRec."Sender Postal Code";
                toRec."Sender Street Address" := fromRec."Sender Street Address";
                toRec.Insert();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate50196"()
    var
        fromRec: Record "EOL Variant Group";
        toRec: Record "EOS Variant Group";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.Init();
                toRec."Code" := fromRec."Code";
                toRec."Description" := fromRec."Description";
                toRec.Insert();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate50197"()
    var
        fromRec: Record "EOL Variant Group Detail";
        toRec: Record "EOS Variant Group Detail";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.Init();
                toRec."Code" := fromRec."Code";
                toRec."Description" := fromRec."Description";
                toRec."Enabled" := fromRec."Enabled";
                toRec."Variant Group Code" := fromRec."Variant Group Code";
                toRec.Insert();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate50198"()
    var
        fromRec: Record "EOL Inventory Entry";
        toRec: Record "EOS Inventory Entry";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.Init();
                toRec."Bin Code" := fromRec."Bin Code";
                toRec."Bin Type Code" := fromRec."Bin Type Code";
                toRec."Cubage" := fromRec."Cubage";
                toRec."Dedicated" := fromRec."Dedicated";
                toRec."Description" := fromRec."Description";
                toRec."Entry No." := fromRec."Entry No.";
                toRec."Entry Type" := fromRec."Entry Type";
                toRec."Expiration Date" := fromRec."Expiration Date";
                toRec."Item No." := fromRec."Item No.";
                toRec."Journal Batch Name" := fromRec."Journal Batch Name";
                toRec."Journal Template Name" := fromRec."Journal Template Name";
                toRec."Line No." := fromRec."Line No.";
                toRec."Location Code" := fromRec."Location Code";
                toRec."Lot No." := fromRec."Lot No.";
                toRec."No. Series" := fromRec."No. Series";
                toRec."Package No." := fromRec."Package No.";
                toRec."Phys Invt Counting Period Code" := fromRec."Phys Invt Counting Period Code";
                toRec."Phys Invt Counting Period Type" := fromRec."Phys Invt Counting Period Type";
                toRec."Qty. (Base)" := fromRec."Qty. (Base)";
                toRec."Qty. per Unit of Measure" := fromRec."Qty. per Unit of Measure";
                toRec."Quantity" := fromRec."Quantity";
                toRec."Reason Code" := fromRec."Reason Code";
                toRec."Reference Document" := fromRec."Reference Document";
                toRec."Reference No." := fromRec."Reference No.";
                toRec."Registering Date" := fromRec."Registering Date";
                toRec."Serial No." := fromRec."Serial No.";
                toRec."Source Code" := fromRec."Source Code";
                toRec."Source Document" := fromRec."Source Document";
                toRec."Source Line No." := fromRec."Source Line No.";
                toRec."Source No." := fromRec."Source No.";
                toRec."Source Subline No." := fromRec."Source Subline No.";
                toRec."Source Subtype" := fromRec."Source Subtype";
                toRec."Source Type" := fromRec."Source Type";
                toRec."Unit of Measure Code" := fromRec."Unit of Measure Code";
                toRec."User ID" := fromRec."User ID";
                toRec."Variant Code" := fromRec."Variant Code";
                toRec."Warranty Date" := fromRec."Warranty Date";
                toRec."Weight" := fromRec."Weight";
                toRec."Whse. Document Line No." := fromRec."Whse. Document Line No.";
                toRec."Whse. Document No." := fromRec."Whse. Document No.";
                toRec."Whse. Document Type" := fromRec."Whse. Document Type";
                toRec."Zone Code" := fromRec."Zone Code";
                toRec.Insert();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate50200"()
    var
        fromRec: Record "EOL Inventory Data";
        toRec: Record "EOS Inventory Data";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.Init();
                toRec."Action Message" := fromRec."Action Message";
                toRec."Action Message Qty." := fromRec."Action Message Qty.";
                toRec."Attached to Line No." := fromRec."Attached to Line No.";
                toRec."Availability Date" := fromRec."Availability Date";
                toRec."Code" := fromRec."Code";
                toRec."Critical Available-To-Promise" := fromRec."Critical Available-To-Promise";
                toRec."Critical Sales" := fromRec."Critical Sales";
                toRec."Critical Sales Row Count" := fromRec."Critical Sales Row Count";
                toRec."Description" := fromRec."Description";
                toRec."Document No." := fromRec."Document No.";
                toRec."Earliest Shipment Date" := fromRec."Earliest Shipment Date";
                toRec."Forecast" := fromRec."Forecast";
                toRec."Forecasted Projected Inventory" := fromRec."Forecasted Projected Inventory";
                toRec."Gross Requirement" := fromRec."Gross Requirement";
                toRec."Item Description" := fromRec."Item Description";
                toRec."Item No." := fromRec."Item No.";
                toRec."Level" := fromRec."Level";
                toRec."Line No." := fromRec."Line No.";
                toRec."Location Code" := fromRec."Location Code";
                toRec."Original Shipment Date" := fromRec."Original Shipment Date";
                toRec."Period End" := fromRec."Period End";
                toRec."Period No." := fromRec."Period No.";
                toRec."Period Start" := fromRec."Period Start";
                toRec."Period Type" := fromRec."Period Type";
                toRec."Planned Delivery Date" := fromRec."Planned Delivery Date";
                toRec."Positive" := fromRec."Positive";
                toRec."Projected Inventory" := fromRec."Projected Inventory";
                toRec."Ref. Order No." := fromRec."Ref. Order No.";
                toRec."Remaining Forecast" := fromRec."Remaining Forecast";
                toRec."Remaining Quantity (Base)" := fromRec."Remaining Quantity (Base)";
                toRec."Requested Delivery Date" := fromRec."Requested Delivery Date";
                toRec."Requested Shipment Date" := fromRec."Requested Shipment Date";
                toRec."Reserved Receipt" := fromRec."Reserved Receipt";
                toRec."Reserved Requirement" := fromRec."Reserved Requirement";
                toRec."Scheduled Receipt" := fromRec."Scheduled Receipt";
                toRec."Source" := fromRec."Source";
                toRec."Source Document ID" := fromRec."Source Document ID";
                toRec."Source Line ID" := fromRec."Source Line ID";
                toRec."Suggested Projected Inventory" := fromRec."Suggested Projected Inventory";
                toRec."Type" := fromRec."Type";
                toRec."Unavailability Date" := fromRec."Unavailability Date";
                toRec."Variant Code" := fromRec."Variant Code";
                toRec.Insert();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate50201"()
    var
        fromRec: Record "EOL Service Object";
        toRec: Record "EOS Service Object";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.Init();
                toRec."Category Code" := fromRec."Category Code";
                toRec."Code" := fromRec."Code";
                toRec."Customer No." := fromRec."Customer No.";
                toRec."Description" := fromRec."Description";
                toRec.Insert();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate50203"()
    var
        fromRec: Record "EOL Detailed Payment Lines";
        toRec: Record "EOS Detailed Payment Lines";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.Init();
                toRec."Amount" := fromRec."Amount";
                toRec."Amount Type" := fromRec."Amount Type";
                toRec."Area" := fromRec."Area";
                toRec."Code" := fromRec."Code";
                toRec."Discount %" := fromRec."Discount %";
                toRec."Discount Date Calculation" := fromRec."Discount Date Calculation";
                toRec."Due Date" := fromRec."Due Date";
                toRec."Due Date Calculation" := fromRec."Due Date Calculation";
                toRec."Journal Line No." := fromRec."Journal Line No.";
                toRec."Journal Template Name" := fromRec."Journal Template Name";
                toRec."Line No." := fromRec."Line No.";
                toRec."Payment %" := fromRec."Payment %";
                toRec."Type" := fromRec."Type";
                toRec.Insert();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate50204"()
    var
        fromRec: Record "EOL Posted Dtld. Payment Lines";
        toRec: Record "EOS Posted Dtld. Payment Lines";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.Init();
                toRec."Amount" := fromRec."Amount";
                toRec."Amount Type" := fromRec."Amount Type";
                toRec."Area" := fromRec."Area";
                toRec."Code" := fromRec."Code";
                toRec."Discount %" := fromRec."Discount %";
                toRec."Discount Date Calculation" := fromRec."Discount Date Calculation";
                toRec."Due Date" := fromRec."Due Date";
                toRec."Due Date Calculation" := fromRec."Due Date Calculation";
                toRec."Line No." := fromRec."Line No.";
                toRec."Payment %" := fromRec."Payment %";
                toRec."Type" := fromRec."Type";
                toRec.Insert();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate50205"()
    var
        fromRec: Record "EOL Approver Category Setup";
        toRec: Record "EOS Approver Category Setup";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.Init();
                toRec."Approver User Id" := fromRec."Approver User Id";
                toRec."Category Code" := fromRec."Category Code";
                toRec."From Amount" := fromRec."From Amount";
                toRec."Line No." := fromRec."Line No.";
                toRec."Previus Approver Mandatory" := fromRec."Previus Approver Mandatory";
                toRec.Insert();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate50206"()
    var
        fromRec: Record "EOL Apprver Sequence Setup";
        toRec: Record "EOS Apprver Sequence Setup";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.Init();
                toRec."Approved" := fromRec."Approved";
                toRec."Document System Id" := fromRec."Document System Id";
                toRec."E-Mail" := fromRec."E-Mail";
                toRec."Order" := fromRec."Order";
                toRec."User Id" := fromRec."User Id";
                toRec.Insert();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate50207"()
    var
        fromRec: Record "EOL Approver Category";
        toRec: Record "EOS Approver Category";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.Init();
                toRec."Code" := fromRec."Code";
                toRec."Description" := fromRec."Description";
                toRec."Source Subtype" := fromRec."Source Subtype";
                toRec."Source Type" := fromRec."Source Type";
                toRec.Insert();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate50208"()
    var
        fromRec: Record "EOL Data Migration Setup";
        toRec: Record "EOS Data Migration Setup";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.Init();
                toRec."Advanced" := fromRec."Advanced";
                toRec."AI Fields Suggestion" := fromRec."AI Fields Suggestion";
                toRec."Amount Column No." := fromRec."Amount Column No.";
                toRec."Category Column No." := fromRec."Category Column No.";
                toRec."Data Exch. Def. Code" := fromRec."Data Exch. Def. Code";
                toRec."Data Process Entity Code" := fromRec."Data Process Entity Code";
                toRec."Data Process No." := fromRec."Data Process No.";
                toRec."Description" := fromRec."Description";
                toRec."Import Completed" := fromRec."Import Completed";
                toRec."Import New File" := fromRec."Import New File";
                toRec."Jnl. Doc. Type Negative Amount" := fromRec."Jnl. Doc. Type Negative Amount";
                toRec."Jnl. Doc. Type Positive Amount" := fromRec."Jnl. Doc. Type Positive Amount";
                toRec."Simple" := fromRec."Simple";
                toRec."Start With Empty Trace" := fromRec."Start With Empty Trace";
                toRec."Start With Trace" := fromRec."Start With Trace";
                toRec."Use Existing Mapping" := fromRec."Use Existing Mapping";
                toRec."Wizard ID" := fromRec."Wizard ID";
                toRec.Insert();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate50209"()
    var
        fromRec: Record "EOL Industry";
        toRec: Record "EOS Industry";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.Init();
                toRec."Code" := fromRec."Code";
                toRec."Description" := fromRec."Description";
                toRec.Insert();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate50210"()
    var
        fromRec: Record "EOL Clock InOut Ledger Entry";
        toRec: Record "EOS Clock InOut Ledger Entry";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.Init();
                toRec."Address From GeoLocation" := fromRec."Address From GeoLocation";
                toRec."Duration" := fromRec."Duration";
                toRec."End Time" := fromRec."End Time";
                toRec."Entry No." := fromRec."Entry No.";
                toRec."Entry Type" := fromRec."Entry Type";
                toRec."Job No." := fromRec."Job No.";
                toRec."Job Task No." := fromRec."Job Task No.";
                toRec."Latitude" := fromRec."Latitude";
                toRec."Link-To Entry No." := fromRec."Link-To Entry No.";
                toRec."Longitude" := fromRec."Longitude";
                toRec."Manual" := fromRec."Manual";
                toRec."Open" := fromRec."Open";
                toRec."Out Of Office" := fromRec."Out Of Office";
                toRec."Posting Date" := fromRec."Posting Date";
                toRec."Quantity" := fromRec."Quantity";
                toRec."Quantity To Handle" := fromRec."Quantity To Handle";
                toRec."Resource No." := fromRec."Resource No.";
                toRec."Ship-to Address Code" := fromRec."Ship-to Address Code";
                toRec."Start Time" := fromRec."Start Time";
                toRec."Suggested Job No." := fromRec."Suggested Job No.";
                toRec."Time Sheet Line Type" := fromRec."Time Sheet Line Type";
                toRec."Time Sheet No." := fromRec."Time Sheet No.";
                toRec."Use Geolocation" := fromRec."Use Geolocation";
                toRec."Work Type Code" := fromRec."Work Type Code";
                toRec.Insert();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate50211"()
    var
        fromRec: Record "EOL Employee Expenses Type";
        toRec: Record "EOS Employee Expenses Type";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.Init();
                toRec."Code" := fromRec."Code";
                toRec."Default G/L Account No." := fromRec."Default G/L Account No.";
                toRec."Description" := fromRec."Description";
                toRec.Insert();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate50212"()
    var
        fromRec: Record "EOL Employee Expenses Detail";
        toRec: Record "EOS Employee Expenses Detail";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.Init();
                toRec."Amount" := fromRec."Amount";
                toRec."Amount (LCY)" := fromRec."Amount (LCY)";
                toRec."Currency Code" := fromRec."Currency Code";
                toRec."Description" := fromRec."Description";
                toRec."G/L Account No" := fromRec."G/L Account No";
                toRec."Line No." := fromRec."Line No.";
                toRec."Line Type" := fromRec."Line Type";
                toRec."Time Sheet Date" := fromRec."Time Sheet Date";
                toRec."Time Sheet Line No." := fromRec."Time Sheet Line No.";
                toRec."Time Sheet No." := fromRec."Time Sheet No.";
                toRec."Type Code" := fromRec."Type Code";
                toRec.Insert();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate50213"()
    var
        fromRec: Record "EOL Job Archive";
        toRec: Record "EOS Job Archive";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.Init();
                toRec."Allow Schedule/Contract Lines" := fromRec."Allow Schedule/Contract Lines";
                toRec."Apply Usage Link" := fromRec."Apply Usage Link";
                toRec."Bill-to Address" := fromRec."Bill-to Address";
                toRec."Bill-to Address 2" := fromRec."Bill-to Address 2";
                toRec."Bill-to City" := fromRec."Bill-to City";
                toRec."Bill-to Contact" := fromRec."Bill-to Contact";
                toRec."Bill-to Contact No." := fromRec."Bill-to Contact No.";
                toRec."Bill-to Country/Region Code" := fromRec."Bill-to Country/Region Code";
                toRec."Bill-to County" := fromRec."Bill-to County";
                toRec."Bill-to Customer No." := fromRec."Bill-to Customer No.";
                toRec."Bill-to Name" := fromRec."Bill-to Name";
                toRec."Bill-to Name 2" := fromRec."Bill-to Name 2";
                toRec."Bill-to Post Code" := fromRec."Bill-to Post Code";
                toRec."Blocked" := fromRec."Blocked";
                toRec."Complete" := fromRec."Complete";
                toRec."Cost Calculation Method" := fromRec."Cost Calculation Method";
                toRec."Creation Date" := fromRec."Creation Date";
                toRec."Currency Code" := fromRec."Currency Code";
                toRec."Customer Disc. Group" := fromRec."Customer Disc. Group";
                toRec."Customer Price Group" := fromRec."Customer Price Group";
                toRec."Description" := fromRec."Description";
                toRec."Description 2" := fromRec."Description 2";
                toRec."Ending Date" := fromRec."Ending Date";
                toRec."Exch. Calculation (Cost)" := fromRec."Exch. Calculation (Cost)";
                toRec."Exch. Calculation (Price)" := fromRec."Exch. Calculation (Price)";
                toRec."External Document No." := fromRec."External Document No.";
                toRec."Global Dimension 1 Code" := fromRec."Global Dimension 1 Code";
                toRec."Global Dimension 2 Code" := fromRec."Global Dimension 2 Code";
                if fromRec."Image".HasValue() then begin
                    if TenantMedia.Get(fromRec."Image") then begin
                        TenantMedia.CalcFields(Content);
                        if TenantMedia.Content.HasValue() then begin
                            fromRec."Image".CreateInStream(IStream);
                            "
                        toRec."Image".ImportStream(IStream, TenantMedia.Description, TenantMedia."Mime Type");
                        end;
                    end;
                end;
                toRec."Invoice Currency Code" := fromRec."Invoice Currency Code";
                toRec."Job Posting Group" := fromRec."Job Posting Group";
                toRec."Language Code" := fromRec."Language Code";
                toRec."Last Date Modified" := fromRec."Last Date Modified";
                toRec."No." := fromRec."No.";
                toRec."No. Series" := fromRec."No. Series";
                toRec."Over Budget" := fromRec."Over Budget";
                toRec."Payment Method Code" := fromRec."Payment Method Code";
                toRec."Payment Terms Code" := fromRec."Payment Terms Code";
                toRec."Person Responsible" := fromRec."Person Responsible";
                toRec."Price Calculation Method" := fromRec."Price Calculation Method";
                toRec."Project Manager" := fromRec."Project Manager";
                toRec."Reserve" := fromRec."Reserve";
                toRec."Search Description" := fromRec."Search Description";
                toRec."Sell-to Address" := fromRec."Sell-to Address";
                toRec."Sell-to Address 2" := fromRec."Sell-to Address 2";
                toRec."Sell-to City" := fromRec."Sell-to City";
                toRec."Sell-to Contact" := fromRec."Sell-to Contact";
                toRec."Sell-to Contact No." := fromRec."Sell-to Contact No.";
                toRec."Sell-to Country/Region Code" := fromRec."Sell-to Country/Region Code";
                toRec."Sell-to County" := fromRec."Sell-to County";
                toRec."Sell-to Customer Name" := fromRec."Sell-to Customer Name";
                toRec."Sell-to Customer Name 2" := fromRec."Sell-to Customer Name 2";
                toRec."Sell-to Customer No." := fromRec."Sell-to Customer No.";
                toRec."Sell-to E-Mail" := fromRec."Sell-to E-Mail";
                toRec."Sell-to Phone No." := fromRec."Sell-to Phone No.";
                toRec."Sell-to Post Code" := fromRec."Sell-to Post Code";
                toRec."Ship-to Address" := fromRec."Ship-to Address";
                toRec."Ship-to Address 2" := fromRec."Ship-to Address 2";
                toRec."Ship-to City" := fromRec."Ship-to City";
                toRec."Ship-to Code" := fromRec."Ship-to Code";
                toRec."Ship-to Contact" := fromRec."Ship-to Contact";
                toRec."Ship-to Country/Region Code" := fromRec."Ship-to Country/Region Code";
                toRec."Ship-to County" := fromRec."Ship-to County";
                toRec."Ship-to Name" := fromRec."Ship-to Name";
                toRec."Ship-to Name 2" := fromRec."Ship-to Name 2";
                toRec."Ship-to Post Code" := fromRec."Ship-to Post Code";
                toRec."Starting Date" := fromRec."Starting Date";
                toRec."Status" := fromRec."Status";
                toRec."Version No." := fromRec."Version No.";
                toRec."WIP Method" := fromRec."WIP Method";
                toRec."WIP Posting Date" := fromRec."WIP Posting Date";
                toRec."WIP Posting Method" := fromRec."WIP Posting Method";
                toRec."Your Reference" := fromRec."Your Reference";
                toRec.Insert();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate50214"()
    var
        fromRec: Record "EOL Job Task Archive";
        toRec: Record "EOS Job Task Archive";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.Init();
                toRec."Description" := fromRec."Description";
                toRec."Global Dimension 1 Code" := fromRec."Global Dimension 1 Code";
                toRec."Global Dimension 2 Code" := fromRec."Global Dimension 2 Code";
                toRec."Indentation" := fromRec."Indentation";
                toRec."Job No." := fromRec."Job No.";
                toRec."Job Posting Group" := fromRec."Job Posting Group";
                toRec."Job Task No." := fromRec."Job Task No.";
                toRec."Job Task Type" := fromRec."Job Task Type";
                toRec."New Page" := fromRec."New Page";
                toRec."No. of Blank Lines" := fromRec."No. of Blank Lines";
                toRec."Recognized Costs Amount" := fromRec."Recognized Costs Amount";
                toRec."Recognized Costs G/L Amount" := fromRec."Recognized Costs G/L Amount";
                toRec."Recognized Sales Amount" := fromRec."Recognized Sales Amount";
                toRec."Recognized Sales G/L Amount" := fromRec."Recognized Sales G/L Amount";
                toRec."Totaling" := fromRec."Totaling";
                toRec."Version No." := fromRec."Version No.";
                toRec."WIP Method" := fromRec."WIP Method";
                toRec."WIP-Total" := fromRec."WIP-Total";
                toRec.Insert();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate50215"()
    var
        fromRec: Record "EOL Job Planning Line Archive";
        toRec: Record "EOS Job Planning Line Archive";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.Init();
                toRec."Bin Code" := fromRec."Bin Code";
                toRec."Completely Picked" := fromRec."Completely Picked";
                toRec."Contract Line" := fromRec."Contract Line";
                toRec."Cost Calculation Method" := fromRec."Cost Calculation Method";
                toRec."Cost Factor" := fromRec."Cost Factor";
                toRec."Country/Region Code" := fromRec."Country/Region Code";
                toRec."Currency Code" := fromRec."Currency Code";
                toRec."Currency Date" := fromRec."Currency Date";
                toRec."Currency Factor" := fromRec."Currency Factor";
                toRec."Customer Price Group" := fromRec."Customer Price Group";
                toRec."Description" := fromRec."Description";
                toRec."Description 2" := fromRec."Description 2";
                toRec."Direct Unit Cost (LCY)" := fromRec."Direct Unit Cost (LCY)";
                toRec."Document Date" := fromRec."Document Date";
                toRec."Document No." := fromRec."Document No.";
                toRec."Gen. Bus. Posting Group" := fromRec."Gen. Bus. Posting Group";
                toRec."Gen. Prod. Posting Group" := fromRec."Gen. Prod. Posting Group";
                toRec."Job Contract Entry No." := fromRec."Job Contract Entry No.";
                toRec."Job Ledger Entry No." := fromRec."Job Ledger Entry No.";
                toRec."Job No." := fromRec."Job No.";
                toRec."Job Task No." := fromRec."Job Task No.";
                toRec."Last Date Modified" := fromRec."Last Date Modified";
                toRec."Ledger Entry No." := fromRec."Ledger Entry No.";
                toRec."Ledger Entry Type" := fromRec."Ledger Entry Type";
                toRec."Line Amount" := fromRec."Line Amount";
                toRec."Line Amount (LCY)" := fromRec."Line Amount (LCY)";
                toRec."Line Discount %" := fromRec."Line Discount %";
                toRec."Line Discount Amount" := fromRec."Line Discount Amount";
                toRec."Line Discount Amount (LCY)" := fromRec."Line Discount Amount (LCY)";
                toRec."Line No." := fromRec."Line No.";
                toRec."Line Type" := fromRec."Line Type";
                toRec."Location Code" := fromRec."Location Code";
                toRec."Lot No." := fromRec."Lot No.";
                toRec."No." := fromRec."No.";
                toRec."Package No." := fromRec."Package No.";
                toRec."Planned" := fromRec."Planned";
                toRec."Planned Delivery Date" := fromRec."Planned Delivery Date";
                toRec."Planning Date" := fromRec."Planning Date";
                toRec."Planning Due Date" := fromRec."Planning Due Date";
                toRec."Posted Line Amount" := fromRec."Posted Line Amount";
                toRec."Posted Line Amount (LCY)" := fromRec."Posted Line Amount (LCY)";
                toRec."Posted Total Cost" := fromRec."Posted Total Cost";
                toRec."Posted Total Cost (LCY)" := fromRec."Posted Total Cost (LCY)";
                toRec."Price Calculation Method" := fromRec."Price Calculation Method";
                toRec."Promised Delivery Date" := fromRec."Promised Delivery Date";
                toRec."Qty. per Unit of Measure" := fromRec."Qty. per Unit of Measure";
                toRec."Qty. Picked" := fromRec."Qty. Picked";
                toRec."Qty. Picked (Base)" := fromRec."Qty. Picked (Base)";
                toRec."Qty. Posted" := fromRec."Qty. Posted";
                toRec."Qty. Rounding Precision" := fromRec."Qty. Rounding Precision";
                toRec."Qty. Rounding Precision (Base)" := fromRec."Qty. Rounding Precision (Base)";
                toRec."Qty. to Invoice" := fromRec."Qty. to Invoice";
                toRec."Qty. to Transfer to Invoice" := fromRec."Qty. to Transfer to Invoice";
                toRec."Qty. to Transfer to Journal" := fromRec."Qty. to Transfer to Journal";
                toRec."Quantity" := fromRec."Quantity";
                toRec."Quantity (Base)" := fromRec."Quantity (Base)";
                toRec."Remaining Line Amount" := fromRec."Remaining Line Amount";
                toRec."Remaining Line Amount (LCY)" := fromRec."Remaining Line Amount (LCY)";
                toRec."Remaining Qty." := fromRec."Remaining Qty.";
                toRec."Remaining Qty. (Base)" := fromRec."Remaining Qty. (Base)";
                toRec."Remaining Total Cost" := fromRec."Remaining Total Cost";
                toRec."Remaining Total Cost (LCY)" := fromRec."Remaining Total Cost (LCY)";
                toRec."Requested Delivery Date" := fromRec."Requested Delivery Date";
                toRec."Reserve" := fromRec."Reserve";
                toRec."Resource Group No." := fromRec."Resource Group No.";
                toRec."Schedule Line" := fromRec."Schedule Line";
                toRec."Serial No." := fromRec."Serial No.";
                toRec."Service Order No." := fromRec."Service Order No.";
                toRec."Status" := fromRec."Status";
                toRec."System-Created Entry" := fromRec."System-Created Entry";
                toRec."Total Cost" := fromRec."Total Cost";
                toRec."Total Cost (LCY)" := fromRec."Total Cost (LCY)";
                toRec."Total Price" := fromRec."Total Price";
                toRec."Total Price (LCY)" := fromRec."Total Price (LCY)";
                toRec."Type" := fromRec."Type";
                toRec."Unit Cost" := fromRec."Unit Cost";
                toRec."Unit Cost (LCY)" := fromRec."Unit Cost (LCY)";
                toRec."Unit of Measure Code" := fromRec."Unit of Measure Code";
                toRec."Unit Price" := fromRec."Unit Price";
                toRec."Unit Price (LCY)" := fromRec."Unit Price (LCY)";
                toRec."Usage Link" := fromRec."Usage Link";
                toRec."User ID" := fromRec."User ID";
                toRec."Variant Code" := fromRec."Variant Code";
                toRec."VAT %" := fromRec."VAT %";
                toRec."VAT Line Amount" := fromRec."VAT Line Amount";
                toRec."VAT Line Discount Amount" := fromRec."VAT Line Discount Amount";
                toRec."VAT Unit Price" := fromRec."VAT Unit Price";
                toRec."Version No." := fromRec."Version No.";
                toRec."Work Type Code" := fromRec."Work Type Code";
                toRec.Insert();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate50216"()
    var
        fromRec: Record "EOL Payroll Export Setup";
        toRec: Record "EOS Payroll Export Setup";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.Init();
                toRec."Absence" := fromRec."Absence";
                toRec."Absence Type" := fromRec."Absence Type";
                toRec."Generate Double Movement" := fromRec."Generate Double Movement";
                toRec."Official Supporting Code" := fromRec."Official Supporting Code";
                toRec."Registration Type" := fromRec."Registration Type";
                toRec."Work Type" := fromRec."Work Type";
                toRec.Insert();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate50217"()
    var
        fromRec: Record "EOL XML Doc. Import Mapping";
        toRec: Record "EOS XML Doc. Import Mapping";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.Init();
                toRec."Destination Value" := fromRec."Destination Value";
                toRec."Entry No." := fromRec."Entry No.";
                toRec."Rule Type" := fromRec."Rule Type";
                toRec."Rule Value" := fromRec."Rule Value";
                toRec.Insert();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate50218"()
    var
        fromRec: Record "EOL Shipping Traking";
        toRec: Record "EOS Shipping Traking";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.Init();
                toRec."Cost Center Code" := fromRec."Cost Center Code";
                toRec."EDI Pickup Booking ID" := fromRec."EDI Pickup Booking ID";
                toRec."No." := fromRec."No.";
                toRec."Order ID" := fromRec."Order ID";
                toRec."Pickup City" := fromRec."Pickup City";
                toRec."Pickup Country/Region Code" := fromRec."Pickup Country/Region Code";
                toRec."Pickup County" := fromRec."Pickup County";
                toRec."Pickup Date" := fromRec."Pickup Date";
                toRec."Pickup E-Mail" := fromRec."Pickup E-Mail";
                toRec."Pickup Mobile Phone No." := fromRec."Pickup Mobile Phone No.";
                toRec."Pickup Phone No." := fromRec."Pickup Phone No.";
                toRec."Pickup Postal Code" := fromRec."Pickup Postal Code";
                toRec."Pickup Reference Last Name" := fromRec."Pickup Reference Last Name";
                toRec."Pickup Reference Name" := fromRec."Pickup Reference Name";
                toRec."Pickup Street Address" := fromRec."Pickup Street Address";
                toRec."Pickup Street Number" := fromRec."Pickup Street Number";
                toRec."Pickup Time Slot" := fromRec."Pickup Time Slot";
                toRec."Platform Type" := fromRec."Platform Type";
                toRec."Receiver City" := fromRec."Receiver City";
                toRec."Receiver Company Name" := fromRec."Receiver Company Name";
                toRec."Receiver Country/Region Code" := fromRec."Receiver Country/Region Code";
                toRec."Receiver County" := fromRec."Receiver County";
                toRec."Receiver E-Mail" := fromRec."Receiver E-Mail";
                toRec."Receiver Mobile Phone No." := fromRec."Receiver Mobile Phone No.";
                toRec."Receiver Phone No." := fromRec."Receiver Phone No.";
                toRec."Receiver Postal Code" := fromRec."Receiver Postal Code";
                toRec."Receiver Reference Last Name" := fromRec."Receiver Reference Last Name";
                toRec."Receiver Reference Name" := fromRec."Receiver Reference Name";
                toRec."Receiver Street Address" := fromRec."Receiver Street Address";
                toRec."Receiver Street Number" := fromRec."Receiver Street Number";
                toRec."Sender City" := fromRec."Sender City";
                toRec."Sender Company Name" := fromRec."Sender Company Name";
                toRec."Sender Country/Region Code" := fromRec."Sender Country/Region Code";
                toRec."Sender County" := fromRec."Sender County";
                toRec."Sender E-Mail" := fromRec."Sender E-Mail";
                toRec."Sender Mobile Phone No." := fromRec."Sender Mobile Phone No.";
                toRec."Sender Phone No." := fromRec."Sender Phone No.";
                toRec."Sender Postal Code" := fromRec."Sender Postal Code";
                toRec."Sender Reference Last Name" := fromRec."Sender Reference Last Name";
                toRec."Sender Reference Name" := fromRec."Sender Reference Name";
                toRec."Sender Street Address" := fromRec."Sender Street Address";
                toRec."Sender Street Number" := fromRec."Sender Street Number";
                toRec."Shipment Date" := fromRec."Shipment Date";
                toRec."Shipping Agent Code" := fromRec."Shipping Agent Code";
                toRec."Shipping Agent Service Code" := fromRec."Shipping Agent Service Code";
                toRec."Shipping Content" := fromRec."Shipping Content";
                toRec."Shipping Notes" := fromRec."Shipping Notes";
                toRec."Source ID" := fromRec."Source ID";
                toRec."Source Line No." := fromRec."Source Line No.";
                toRec."Source Subtype" := fromRec."Source Subtype";
                toRec."Source Type" := fromRec."Source Type";
                toRec."Status" := fromRec."Status";
                toRec."Tracking No." := fromRec."Tracking No.";
                toRec."Tracking Status Info." := fromRec."Tracking Status Info.";
                toRec."Traking Status" := fromRec."Traking Status";
                toRec."Whse. Source ID" := fromRec."Whse. Source ID";
                toRec."Whse. Source Line No." := fromRec."Whse. Source Line No.";
                toRec."Whse. Source Subtype" := fromRec."Whse. Source Subtype";
                toRec."Whse. Source type" := fromRec."Whse. Source type";
                toRec.Insert();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate50219"()
    var
        fromRec: Record "EOL Shipping Parcel";
        toRec: Record "EOS Shipping Parcel";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.Init();
                toRec."Goods Aspect Code" := fromRec."Goods Aspect Code";
                toRec."Height" := fromRec."Height";
                toRec."Length" := fromRec."Length";
                toRec."Line No." := fromRec."Line No.";
                toRec."New Order ID" := fromRec."New Order ID";
                toRec."No." := fromRec."No.";
                toRec."Source ID" := fromRec."Source ID";
                toRec."Source Line No." := fromRec."Source Line No.";
                toRec."Source Subtype" := fromRec."Source Subtype";
                toRec."Source Type" := fromRec."Source Type";
                toRec."Tracking No." := fromRec."Tracking No.";
                toRec."Web Entry No." := fromRec."Web Entry No.";
                toRec."Weight" := fromRec."Weight";
                toRec."Width" := fromRec."Width";
                toRec.Insert();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate50220"()
    var
        fromRec: Record "EOL Serial No. Info. Detail";
        toRec: Record "EOS Serial No. Info. Detail";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.Init();
                toRec."Description" := fromRec."Description";
                toRec."Detail Serial No." := fromRec."Detail Serial No.";
                toRec."Item No." := fromRec."Item No.";
                toRec."Parent Serial No." := fromRec."Parent Serial No.";
                toRec."Quantity" := fromRec."Quantity";
                toRec."Variant Code" := fromRec."Variant Code";
                toRec."Warranty Ending Date" := fromRec."Warranty Ending Date";
                toRec.Insert();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate50221"()
    var
        fromRec: Record "EOL Service Order Header";
        toRec: Record "EOS Service Order Header";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.Init();
                toRec."Assigned User Id" := fromRec."Assigned User Id";
                toRec."Completed" := fromRec."Completed";
                toRec."Contact No." := fromRec."Contact No.";
                toRec."Customer No." := fromRec."Customer No.";
                toRec."Description" := fromRec."Description";
                toRec."End Date" := fromRec."End Date";
                toRec."Job No." := fromRec."Job No.";
                toRec."Job Task No." := fromRec."Job Task No.";
                toRec."Job Task No. Begin Total" := fromRec."Job Task No. Begin Total";
                toRec."Location Code" := fromRec."Location Code";
                toRec."No." := fromRec."No.";
                toRec."Service Object Item No." := fromRec."Service Object Item No.";
                toRec."Service Object No." := fromRec."Service Object No.";
                toRec."Service Object Variant Code" := fromRec."Service Object Variant Code";
                toRec."Start Date" := fromRec."Start Date";
                toRec."Warranty Ending Date" := fromRec."Warranty Ending Date";
                toRec.Insert();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate50222"()
    var
        fromRec: Record "EOL Service Order Line";
        toRec: Record "EOS Service Order Line";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.Init();
                toRec."Billable" := fromRec."Billable";
                toRec."Bin Code" := fromRec."Bin Code";
                toRec."Description" := fromRec."Description";
                toRec."Item Serial No." := fromRec."Item Serial No.";
                toRec."Line No." := fromRec."Line No.";
                toRec."Line Type" := fromRec."Line Type";
                toRec."Location Code" := fromRec."Location Code";
                toRec."New Item Serial No." := fromRec."New Item Serial No.";
                toRec."No." := fromRec."No.";
                toRec."Planning Date" := fromRec."Planning Date";
                toRec."Quantity" := fromRec."Quantity";
                toRec."Repaired Item Retrieved" := fromRec."Repaired Item Retrieved";
                toRec."Repairman No." := fromRec."Repairman No.";
                toRec."Replace" := fromRec."Replace";
                toRec."Return From Customer Created" := fromRec."Return From Customer Created";
                toRec."Return From Vendor Doc. No." := fromRec."Return From Vendor Doc. No.";
                toRec."Service Order No." := fromRec."Service Order No.";
                toRec."Transfer To Cust. Document No" := fromRec."Transfer To Cust. Document No";
                toRec."Transfer To Vendor Document No" := fromRec."Transfer To Vendor Document No";
                toRec."Type" := fromRec."Type";
                toRec."Unit of Measure Code" := fromRec."Unit of Measure Code";
                toRec."Variant Code" := fromRec."Variant Code";
                toRec."Vendor Service Purch. Ord. No." := fromRec."Vendor Service Purch. Ord. No.";
                toRec."Work Type Code" := fromRec."Work Type Code";
                toRec.Insert();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate50223"()
    var
        fromRec: Record "EOL Item Ledger Entry History";
        toRec: Record "EOS Item Ledger Entry History";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.Init();
                toRec."Applied Entry to Adjust" := fromRec."Applied Entry to Adjust";
                toRec."Applies-to Entry" := fromRec."Applies-to Entry";
                toRec."Area" := fromRec."Area";
                toRec."Assemble to Order" := fromRec."Assemble to Order";
                toRec."Completely Invoiced" := fromRec."Completely Invoiced";
                toRec."Correction" := fromRec."Correction";
                toRec."Cost Amount (Actual)" := fromRec."Cost Amount (Actual)";
                toRec."Cost Amount (Actual) (ACY)" := fromRec."Cost Amount (Actual) (ACY)";
                toRec."Cost Amount (Expected)" := fromRec."Cost Amount (Expected)";
                toRec."Cost Amount (Expected) (ACY)" := fromRec."Cost Amount (Expected) (ACY)";
                toRec."Cost Amount (Non-Invtbl.)" := fromRec."Cost Amount (Non-Invtbl.)";
                toRec."Cost Amount (Non-Invtbl.)(ACY)" := fromRec."Cost Amount (Non-Invtbl.)(ACY)";
                toRec."Country/Region Code" := fromRec."Country/Region Code";
                toRec."Derived from Blanket Order" := fromRec."Derived from Blanket Order";
                toRec."Description" := fromRec."Description";
                toRec."Dimension Set ID" := fromRec."Dimension Set ID";
                toRec."Document Date" := fromRec."Document Date";
                toRec."Document Line No." := fromRec."Document Line No.";
                toRec."Document No." := fromRec."Document No.";
                toRec."Document Type" := fromRec."Document Type";
                toRec."Drop Shipment" := fromRec."Drop Shipment";
                toRec."Entry No." := fromRec."Entry No.";
                toRec."Entry Type" := fromRec."Entry Type";
                toRec."Entry/Exit Point" := fromRec."Entry/Exit Point";
                toRec."Expiration Date" := fromRec."Expiration Date";
                toRec."External Document No." := fromRec."External Document No.";
                toRec."Global Dimension 1 Code" := fromRec."Global Dimension 1 Code";
                toRec."Global Dimension 2 Code" := fromRec."Global Dimension 2 Code";
                toRec."Invoiced Quantity" := fromRec."Invoiced Quantity";
                toRec."Item Category Code" := fromRec."Item Category Code";
                toRec."Item No." := fromRec."Item No.";
                toRec."Item Reference No." := fromRec."Item Reference No.";
                toRec."Item Tracking" := fromRec."Item Tracking";
                toRec."Job No." := fromRec."Job No.";
                toRec."Job Purchase" := fromRec."Job Purchase";
                toRec."Job Task No." := fromRec."Job Task No.";
                toRec."Last Invoice Date" := fromRec."Last Invoice Date";
                toRec."Location Code" := fromRec."Location Code";
                toRec."Lot No." := fromRec."Lot No.";
                toRec."No. Series" := fromRec."No. Series";
                toRec."Nonstock" := fromRec."Nonstock";
                toRec."Open" := fromRec."Open";
                toRec."Order Line No." := fromRec."Order Line No.";
                toRec."Order No." := fromRec."Order No.";
                toRec."Order Type" := fromRec."Order Type";
                toRec."Originally Ordered No." := fromRec."Originally Ordered No.";
                toRec."Originally Ordered Var. Code" := fromRec."Originally Ordered Var. Code";
                toRec."Out-of-Stock Substitution" := fromRec."Out-of-Stock Substitution";
                toRec."Package No." := fromRec."Package No.";
                toRec."Positive" := fromRec."Positive";
                toRec."Posting Date" := fromRec."Posting Date";
                toRec."Prod. Order Comp. Line No." := fromRec."Prod. Order Comp. Line No.";
                toRec."Prod. Order Line No." := fromRec."Prod. Order Line No.";
                toRec."Prod. Order No." := fromRec."Prod. Order No.";
                toRec."Purchase Amount (Actual)" := fromRec."Purchase Amount (Actual)";
                toRec."Purchase Amount (Expected)" := fromRec."Purchase Amount (Expected)";
                toRec."Purchasing Code" := fromRec."Purchasing Code";
                toRec."Qty. per Unit of Measure" := fromRec."Qty. per Unit of Measure";
                toRec."Quantity" := fromRec."Quantity";
                toRec."Remaining Quantity" := fromRec."Remaining Quantity";
                toRec."Return Reason Code" := fromRec."Return Reason Code";
                toRec."Sales Amount (Actual)" := fromRec."Sales Amount (Actual)";
                toRec."Sales Amount (Expected)" := fromRec."Sales Amount (Expected)";
                toRec."Serial No." := fromRec."Serial No.";
                toRec."Shipped Qty. Not Returned" := fromRec."Shipped Qty. Not Returned";
                toRec."Shpt. Method Code" := fromRec."Shpt. Method Code";
                toRec."Source No." := fromRec."Source No.";
                toRec."Source Type" := fromRec."Source Type";
                toRec."Subcontr. Purch. Order Line" := fromRec."Subcontr. Purch. Order Line";
                toRec."Subcontr. Purch. Order No." := fromRec."Subcontr. Purch. Order No.";
                toRec."Transaction Specification" := fromRec."Transaction Specification";
                toRec."Transaction Type" := fromRec."Transaction Type";
                toRec."Transport Method" := fromRec."Transport Method";
                toRec."Unit of Measure Code" := fromRec."Unit of Measure Code";
                toRec."Variant Code" := fromRec."Variant Code";
                toRec."Warranty Date" := fromRec."Warranty Date";
                toRec.Insert();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate50224"()
    var
        fromRec: Record "EOL Empl. Expenses Attachment";
        toRec: Record "EOS Empl. Expenses Attachment";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.Init();
                toRec."Amount Found" := fromRec."Amount Found";
                toRec."Date Found" := fromRec."Date Found";
                toRec."Expenses Line No." := fromRec."Expenses Line No.";
                if fromRec."File Content".HasValue() then begin
                    if TenantMedia.Get(fromRec."File Content") then begin
                        TenantMedia.CalcFields(Content);
                        if TenantMedia.Content.HasValue() then begin
                            fromRec."File Content".CreateInStream(IStream);
                            "
                        toRec."File Content".ImportStream(IStream, TenantMedia.Description, TenantMedia."Mime Type");
                        end;
                    end;
                end;
                toRec."File Name" := fromRec."File Name";
                toRec."File Type" := fromRec."File Type";
                toRec."Time Sheet Date" := fromRec."Time Sheet Date";
                toRec."Time Sheet Line No." := fromRec."Time Sheet Line No.";
                toRec."Time Sheet No." := fromRec."Time Sheet No.";
                toRec.Insert();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate50225"()
    var
        fromRec: Record "EOL Shipping Agent EDI Setup";
        toRec: Record "EOS Shipping Agent EDI Setup";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.Init();
                toRec."Code" := fromRec."Code";
                toRec."Cost Center Code" := fromRec."Cost Center Code";
                toRec."Sender City" := fromRec."Sender City";
                toRec."Sender Company Name" := fromRec."Sender Company Name";
                toRec."Sender Country" := fromRec."Sender Country";
                toRec."Sender County" := fromRec."Sender County";
                toRec."Sender E-Mail" := fromRec."Sender E-Mail";
                toRec."Sender Mobile Phone No." := fromRec."Sender Mobile Phone No.";
                toRec."Sender Name" := fromRec."Sender Name";
                toRec."Sender Phone No." := fromRec."Sender Phone No.";
                toRec."Sender Postal Code" := fromRec."Sender Postal Code";
                toRec."Sender Street Address" := fromRec."Sender Street Address";
                toRec."Sender Street Number" := fromRec."Sender Street Number";
                toRec."Sender Surname" := fromRec."Sender Surname";
                toRec.Insert();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate50226"()
    var
        fromRec: Record "EOL Employee Expenses Amount";
        toRec: Record "EOS Employee Expenses Amount";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.Init();
                toRec."Amount" := fromRec."Amount";
                toRec."Amount (LCY)" := fromRec."Amount (LCY)";
                toRec."Currency Code" := fromRec."Currency Code";
                toRec."Expenses Type Code" := fromRec."Expenses Type Code";
                toRec."G/L Account No." := fromRec."G/L Account No.";
                toRec."Job No." := fromRec."Job No.";
                toRec."Line Type" := fromRec."Line Type";
                toRec."Out Of Office" := fromRec."Out Of Office";
                toRec."Ship-to Address Code" := fromRec."Ship-to Address Code";
                toRec.Insert();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate50227"()
    var
        fromRec: Record "EOL Fiscal Printer Receipt";
        toRec: Record "EOS Fiscal Printer Receipt";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.Init();
                toRec."Amount" := fromRec."Amount";
                toRec."Date" := fromRec."Date";
                toRec."Last Command" := fromRec."Last Command";
                toRec."Printer Status" := fromRec."Printer Status";
                toRec."Receipt No." := fromRec."Receipt No.";
                toRec."Receipt Status" := fromRec."Receipt Status";
                toRec."Serial No." := fromRec."Serial No.";
                toRec."Source ID" := fromRec."Source ID";
                toRec."Source Line No." := fromRec."Source Line No.";
                toRec."Source Subtype" := fromRec."Source Subtype";
                toRec."Source Type" := fromRec."Source Type";
                toRec."ZReport Number" := fromRec."ZReport Number";
                toRec.Insert();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate50250"()
    var
        fromRec: Record "EOL Permission Admin";
        toRec: Record "EOS Permission Admin";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.Init();
                toRec."App Runtime Package ID" := fromRec."App Runtime Package ID";
                toRec."Area" := fromRec."Area";
                toRec."Classification" := fromRec."Classification";
                toRec."Log Modification" := fromRec."Log Modification";
                toRec."Name" := fromRec."Name";
                toRec."Object ID" := fromRec."Object ID";
                toRec."Object Subtype" := fromRec."Object Subtype";
                toRec."Object Type" := fromRec."Object Type";
                toRec."Permission Set Role ID" := fromRec."Permission Set Role ID";
                toRec."Read Only" := fromRec."Read Only";
                toRec."Records - Late Modified Date" := fromRec."Records - Late Modified Date";
                toRec."Setup Protector" := fromRec."Setup Protector";
                toRec."Setup Protector - Note" := fromRec."Setup Protector - Note";
                toRec."Template Package Code" := fromRec."Template Package Code";
                toRec."Voice Account No." := fromRec."Voice Account No.";
                toRec.Insert();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate50256"()
    var
        fromRec: Record "EOL ADI Setup";
        toRec: Record "EOS Data Exception Table";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.Init();
                toRec."Allowed File Extensions" := fromRec."Allowed File Extensions";
                toRec."API Key" := fromRec."API Key";
                toRec."API Version" := fromRec."API Version";
                toRec."Endpoint" := fromRec."Endpoint";
                toRec."Primary Key" := fromRec."Primary Key";
                toRec.Insert();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate50257"()
    var
        fromRec: Record "EOL ADI Model";
        toRec: Record "EOS Test DataSync";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.Init();
                toRec."Custom" := fromRec."Custom";
                toRec."Description" := fromRec."Description";
                toRec."Document Nos." := fromRec."Document Nos.";
                toRec."ID" := fromRec."ID";
                toRec."Processing Codeunit ID" := fromRec."Processing Codeunit ID";
                toRec."Variable Handling Codeunit ID" := fromRec."Variable Handling Codeunit ID";
                toRec.Insert();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate50258"()
    var
        fromRec: Record "EOL ADI Document";
        toRec: Record "EOS ADM Data Process Line";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.Init();
                toRec."Analysis Attachment No." := fromRec."Analysis Attachment No.";
                toRec."Completed At" := fromRec."Completed At";
                toRec."Description" := fromRec."Description";
                if fromRec."Document Attachment".HasValue() then begin
                    fromRec.CalcFields("Document Attachment");
                    fromRec."Document Attachment".CreateInStream(IStream);
                    toRec."Document Attachment".CreateOutStream(OStream);
                    CopyStream(OStream, IStream);
                end;
                toRec."Document No." := fromRec."Document No.";
                toRec."Document Source ID" := fromRec."Document Source ID";
                toRec."Document Source Subtype" := fromRec."Document Source Subtype";
                toRec."Document Source Type" := fromRec."Document Source Type";
                toRec."Error Message" := fromRec."Error Message";
                toRec."Model ID" := fromRec."Model ID";
                toRec."Operation ID" := fromRec."Operation ID";
                toRec."Source ID" := fromRec."Source ID";
                toRec."Source Reference" := fromRec."Source Reference";
                toRec."Source Subtype" := fromRec."Source Subtype";
                toRec."Source Type" := fromRec."Source Type";
                toRec."Started At" := fromRec."Started At";
                toRec."Status" := fromRec."Status";
                toRec.Insert();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate50259"()
    var
        fromRec: Record "EOL ADI Document Variable";
        toRec: Record "EOS ADM Data Process Entity";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.Init();
                toRec."Document No." := fromRec."Document No.";
                toRec."Model ID" := fromRec."Model ID";
                toRec."Name" := fromRec."Name";
                toRec."Occurence" := fromRec."Occurence";
                toRec."Page ID" := fromRec."Page ID";
                toRec."Type" := fromRec."Type";
                toRec."Value" := fromRec."Value";
                toRec.Insert();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate50261"()
    var
        fromRec: Record "EOL Role Activities Cue";
        toRec: Record "EOS ADM Entity Template";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.Init();
                toRec."Approval Pending Request" := fromRec."Approval Pending Request";
                toRec."Average time of use" := fromRec."Average time of use";
                toRec."Cash Balance" := fromRec."Cash Balance";
                toRec."FE In Error" := fromRec."FE In Error";
                toRec."FE Job Queue In Error" := fromRec."FE Job Queue In Error";
                toRec."Inventory Analisys" := fromRec."Inventory Analisys";
                toRec."Invoices To Be Recieve (Total)" := fromRec."Invoices To Be Recieve (Total)";
                toRec."Late" := fromRec."Late";
                toRec."Late Task" := fromRec."Late Task";
                toRec."Margin % (Average)" := fromRec."Margin % (Average)";
                toRec."Month Result" := fromRec."Month Result";
                toRec."Month Sales (Total)" := fromRec."Month Sales (Total)";
                toRec."Operating profit on budget" := fromRec."Operating profit on budget";
                toRec."Orders Sent To Vendor" := fromRec."Orders Sent To Vendor";
                toRec."Orders To Approve" := fromRec."Orders To Approve";
                toRec."Orders To Recieve" := fromRec."Orders To Recieve";
                toRec."Pending Orders (Total)" := fromRec."Pending Orders (Total)";
                toRec."Pending Request To Approve" := fromRec."Pending Request To Approve";
                toRec."PowerBI Report" := fromRec."PowerBI Report";
                toRec."Primary Key" := fromRec."Primary Key";
                toRec."Raw Material Value (Total)" := fromRec."Raw Material Value (Total)";
                toRec."Sales Order Book (Total)" := fromRec."Sales Order Book (Total)";
                toRec."Semi-Finished Value (Total)" := fromRec."Semi-Finished Value (Total)";
                toRec."Shipped To Be Invoiced (Total)" := fromRec."Shipped To Be Invoiced (Total)";
                toRec."Stock Items" := fromRec."Stock Items";
                toRec."Task" := fromRec."Task";
                toRec."Trial Balance" := fromRec."Trial Balance";
                toRec."Year Result" := fromRec."Year Result";
                toRec.Insert();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate65000"()
    var
        fromRec: Record "BCN MMI Flow Entry";
        toRec: Record "EOS MMI Flow Entry";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.Init();
                toRec."Amount" := fromRec."Amount";
                toRec."AP Doc. Source ID" := fromRec."AP Doc. Source ID";
                toRec."AP Doc. Source Ref. No." := fromRec."AP Doc. Source Ref. No.";
                toRec."AP Doc. Source Subtype" := fromRec."AP Doc. Source Subtype";
                toRec."AP Doc. Source Type" := fromRec."AP Doc. Source Type";
                toRec."AP Posted" := fromRec."AP Posted";
                toRec."AP Posted Document No." := fromRec."AP Posted Document No.";
                toRec."Applies-to Doc. No." := fromRec."Applies-to Doc. No.";
                toRec."Applies-to Doc. Type" := fromRec."Applies-to Doc. Type";
                toRec."Applies-to Entry" := fromRec."Applies-to Entry";
                toRec."Applies-to Ext. Doc. No." := fromRec."Applies-to Ext. Doc. No.";
                toRec."Applies-to Occurrence No." := fromRec."Applies-to Occurrence No.";
                toRec."Area" := fromRec."Area";
                toRec."Attachment No." := fromRec."Attachment No.";
                toRec."Balance Source No." := fromRec."Balance Source No.";
                toRec."Balance Source Type" := fromRec."Balance Source Type";
                toRec."Base Amount" := fromRec."Base Amount";
                toRec."Bill-to/Pay-to" := fromRec."Bill-to/Pay-to";
                toRec."Bin Code" := fromRec."Bin Code";
                toRec."Company ID" := fromRec."Company ID";
                toRec."Cost Center 1" := fromRec."Cost Center 1";
                toRec."Cost Center 2" := fromRec."Cost Center 2";
                toRec."Cost Center New" := fromRec."Cost Center New";
                toRec."Country/Region Code" := fromRec."Country/Region Code";
                toRec."Create Advance Payment" := fromRec."Create Advance Payment";
                toRec."Create Parameter" := fromRec."Create Parameter";
                toRec."Creation Date-Time" := fromRec."Creation Date-Time";
                toRec."Currency Code" := fromRec."Currency Code";
                toRec."Custom Text 1 Code" := fromRec."Custom Text 1 Code";
                toRec."Custom Text 2 Code" := fromRec."Custom Text 2 Code";
                toRec."Custom Text 3 Code" := fromRec."Custom Text 3 Code";
                toRec."Customer No." := fromRec."Customer No.";
                toRec."Date Parameter" := fromRec."Date Parameter";
                toRec."Delete Requested" := fromRec."Delete Requested";
                toRec."Description" := fromRec."Description";
                toRec."Description 2" := fromRec."Description 2";
                toRec."Dimension 1 Value" := fromRec."Dimension 1 Value";
                toRec."Dimension 2 Value" := fromRec."Dimension 2 Value";
                toRec."Dimension 3 Value" := fromRec."Dimension 3 Value";
                toRec."Dimension 4 Value" := fromRec."Dimension 4 Value";
                toRec."Dimension 5 Value" := fromRec."Dimension 5 Value";
                toRec."Dimension 6 Value" := fromRec."Dimension 6 Value";
                toRec."Dimension 7 Value" := fromRec."Dimension 7 Value";
                toRec."Dimension 8 Value" := fromRec."Dimension 8 Value";
                toRec."Discount % 1" := fromRec."Discount % 1";
                toRec."Discount % 2" := fromRec."Discount % 2";
                toRec."Discount % 3" := fromRec."Discount % 3";
                toRec."Discount % 4" := fromRec."Discount % 4";
                toRec."Discount % 5" := fromRec."Discount % 5";
                toRec."Discount Amount" := fromRec."Discount Amount";
                toRec."Doc. Source ID" := fromRec."Doc. Source ID";
                toRec."Doc. Source Ref. No." := fromRec."Doc. Source Ref. No.";
                toRec."Doc. Source Subtype" := fromRec."Doc. Source Subtype";
                toRec."Doc. Source Type" := fromRec."Doc. Source Type";
                toRec."Document Date" := fromRec."Document Date";
                toRec."Document Line No." := fromRec."Document Line No.";
                toRec."Document No." := fromRec."Document No.";
                toRec."Document Type" := fromRec."Document Type";
                toRec."Drop Shipment" := fromRec."Drop Shipment";
                toRec."Duty" := fromRec."Duty";
                toRec."EDoc. Code" := fromRec."EDoc. Code";
                toRec."EDoc. Format" := fromRec."EDoc. Format";
                toRec."EDoc. Type" := fromRec."EDoc. Type";
                toRec."Entry No." := fromRec."Entry No.";
                toRec."Entry Type" := fromRec."Entry Type";
                toRec."EOS Accrual Ending Date" := fromRec."EOS Accrual Ending Date";
                toRec."EOS Accrual Starting Date" := fromRec."EOS Accrual Starting Date";
                toRec."EOS Accrual Template" := fromRec."EOS Accrual Template";
                toRec."Error Message" := fromRec."Error Message";
                toRec."Expiration Date" := fromRec."Expiration Date";
                toRec."External Document No." := fromRec."External Document No.";
                toRec."Free Invoice" := fromRec."Free Invoice";
                toRec."Group Primary Key" := fromRec."Group Primary Key";
                toRec."Import Date" := fromRec."Import Date";
                toRec."Import Time" := fromRec."Import Time";
                toRec."In Process" := fromRec."In Process";
                toRec."Indirect Cost %" := fromRec."Indirect Cost %";
                toRec."Inventory Posting Group" := fromRec."Inventory Posting Group";
                toRec."Invoice No." := fromRec."Invoice No.";
                toRec."Invoiced Quantity" := fromRec."Invoiced Quantity";
                toRec."invoicing Cost" := fromRec."invoicing Cost";
                toRec."Is Error" := fromRec."Is Error";
                toRec."Is Professional Tax Amount" := fromRec."Is Professional Tax Amount";
                toRec."Item No." := fromRec."Item No.";
                toRec."Item Shpt. Entry No." := fromRec."Item Shpt. Entry No.";
                toRec."Job Contract Entry No." := fromRec."Job Contract Entry No.";
                toRec."Job No." := fromRec."Job No.";
                toRec."Job Planning Line No." := fromRec."Job Planning Line No.";
                toRec."Job Task No." := fromRec."Job Task No.";
                toRec."Journal Batch Name" := fromRec."Journal Batch Name";
                toRec."Journal Batch Name Parameter" := fromRec."Journal Batch Name Parameter";
                toRec."Journal Temp. Name Parameter" := fromRec."Journal Temp. Name Parameter";
                toRec."Journal Template Name" := fromRec."Journal Template Name";
                toRec."Line No." := fromRec."Line No.";
                toRec."Link Source ID" := fromRec."Link Source ID";
                toRec."Link Source Ref. No." := fromRec."Link Source Ref. No.";
                toRec."Link Source Subtype" := fromRec."Link Source Subtype";
                toRec."Link Source Type" := fromRec."Link Source Type";
                toRec."Location Code" := fromRec."Location Code";
                toRec."Lot No." := fromRec."Lot No.";
                toRec."MMI Reason Code" := fromRec."MMI Reason Code";
                toRec."New Bin Code" := fromRec."New Bin Code";
                toRec."New Location Code" := fromRec."New Location Code";
                toRec."No Withholding Contrib." := fromRec."No Withholding Contrib.";
                toRec."No." := fromRec."No.";
                toRec."Operation Type" := fromRec."Operation Type";
                toRec."Order Date" := fromRec."Order Date";
                toRec."Order Line No." := fromRec."Order Line No.";
                toRec."Order No." := fromRec."Order No.";
                toRec."Order Type" := fromRec."Order Type";
                toRec."Originally Ordered No." := fromRec."Originally Ordered No.";
                toRec."Payment Method Code" := fromRec."Payment Method Code";
                toRec."Payment Terms Code" := fromRec."Payment Terms Code";
                toRec."Posted" := fromRec."Posted";
                toRec."Posted Document No." := fromRec."Posted Document No.";
                toRec."Posting Date" := fromRec."Posting Date";
                toRec."Posting Parameter" := fromRec."Posting Parameter";
                toRec."Posting Type Parameter" := fromRec."Posting Type Parameter";
                toRec."Processed" := fromRec."Processed";
                toRec."Processing Date" := fromRec."Processing Date";
                toRec."Processing Time" := fromRec."Processing Time";
                toRec."Purchase Shipping Options" := fromRec."Purchase Shipping Options";
                toRec."Purchasing Code" := fromRec."Purchasing Code";
                toRec."Qty. per Unit of Measure" := fromRec."Qty. per Unit of Measure";
                toRec."Quantity" := fromRec."Quantity";
                toRec."Quantity (Base)" := fromRec."Quantity (Base)";
                toRec."Quantity to Receive" := fromRec."Quantity to Receive";
                toRec."Quantity to Ship" := fromRec."Quantity to Ship";
                toRec."Reason Code" := fromRec."Reason Code";
                toRec."Recurring Frequency" := fromRec."Recurring Frequency";
                toRec."Recurring Method" := fromRec."Recurring Method";
                toRec."Reverse Sales VAT No." := fromRec."Reverse Sales VAT No.";
                toRec."Reverse Sales VAT No. Series" := fromRec."Reverse Sales VAT No. Series";
                toRec."Salespers./Purch. Code" := fromRec."Salespers./Purch. Code";
                toRec."Sender VAT Registration No." := fromRec."Sender VAT Registration No.";
                toRec."Serial No." := fromRec."Serial No.";
                toRec."Shipment Date" := fromRec."Shipment Date";
                toRec."Shipment Method Code" := fromRec."Shipment Method Code";
                toRec."Shipping Cost" := fromRec."Shipping Cost";
                toRec."Ship-to Address" := fromRec."Ship-to Address";
                toRec."Ship-to Address 2" := fromRec."Ship-to Address 2";
                toRec."Ship-to City" := fromRec."Ship-to City";
                toRec."Ship-to Code" := fromRec."Ship-to Code";
                toRec."Ship-to Country/Region Code" := fromRec."Ship-to Country/Region Code";
                toRec."Ship-to County" := fromRec."Ship-to County";
                toRec."Ship-to Informations Exist" := fromRec."Ship-to Informations Exist";
                toRec."Ship-to Name" := fromRec."Ship-to Name";
                toRec."Ship-to Post Code" := fromRec."Ship-to Post Code";
                toRec."Shop Type" := fromRec."Shop Type";
                toRec."Shortcut Dimension 1 Code" := fromRec."Shortcut Dimension 1 Code";
                toRec."Shortcut Dimension 2 Code" := fromRec."Shortcut Dimension 2 Code";
                toRec."Source Address" := fromRec."Source Address";
                toRec."Source Address 2" := fromRec."Source Address 2";
                toRec."Source City" := fromRec."Source City";
                toRec."Source Code" := fromRec."Source Code";
                toRec."Source Country/Region Code" := fromRec."Source Country/Region Code";
                toRec."Source County" := fromRec."Source County";
                toRec."Source Data Type" := fromRec."Source Data Type";
                toRec."Source Document Parameter" := fromRec."Source Document Parameter";
                toRec."Source E-Mail" := fromRec."Source E-Mail";
                toRec."Source External ID" := fromRec."Source External ID";
                toRec."Source First Name" := fromRec."Source First Name";
                toRec."Source Fiscal Code" := fromRec."Source Fiscal Code";
                toRec."Source Individual Person" := fromRec."Source Individual Person";
                toRec."Source Last Name" := fromRec."Source Last Name";
                toRec."Source Name" := fromRec."Source Name";
                toRec."Source No." := fromRec."Source No.";
                toRec."Source Payment Method" := fromRec."Source Payment Method";
                toRec."Source PEC E-Mail" := fromRec."Source PEC E-Mail";
                toRec."Source Post Code" := fromRec."Source Post Code";
                toRec."Source Posting Group" := fromRec."Source Posting Group";
                toRec."Source Record ID" := fromRec."Source Record ID";
                toRec."Source Subtype" := fromRec."Source Subtype";
                toRec."Source Type" := fromRec."Source Type";
                toRec."Source VAT No." := fromRec."Source VAT No.";
                toRec."Split Payment Code" := fromRec."Split Payment Code";
                toRec."Time Parameter" := fromRec."Time Parameter";
                toRec."Transaction Type" := fromRec."Transaction Type";
                toRec."Transport Method" := fromRec."Transport Method";
                toRec."Type" := fromRec."Type";
                toRec."Type Parameter" := fromRec."Type Parameter";
                toRec."Typology" := fromRec."Typology";
                toRec."Unit Amount" := fromRec."Unit Amount";
                toRec."Unit Cost" := fromRec."Unit Cost";
                toRec."Unit of Measure Code" := fromRec."Unit of Measure Code";
                toRec."Variant Code" := fromRec."Variant Code";
                toRec."VAT %" := fromRec."VAT %";
                toRec."VAT Amount" := fromRec."VAT Amount";
                toRec."VAT Bus. Posting Group" := fromRec."VAT Bus. Posting Group";
                toRec."VAT Identifier" := fromRec."VAT Identifier";
                toRec."VAT Prod. Posting Group" := fromRec."VAT Prod. Posting Group";
                toRec."Your Reference" := fromRec."Your Reference";
                toRec."Zone Code" := fromRec."Zone Code";
                toRec.Insert();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate65001"()
    var
        fromRec: Record "BCN MMI Flow";
        toRec: Record "EOS MMI Flow";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.Init();
                toRec."AP Shipment Nos." := fromRec."AP Shipment Nos.";
                toRec."Archiving Codeunit ID" := fromRec."Archiving Codeunit ID";
                toRec."Check Amount On Header" := fromRec."Check Amount On Header";
                toRec."Check Posting Date" := fromRec."Check Posting Date";
                toRec."Code" := fromRec."Code";
                toRec."Connection Code" := fromRec."Connection Code";
                toRec."Cost Invoice Description" := fromRec."Cost Invoice Description";
                toRec."Create" := fromRec."Create";
                toRec."Customer Enable Sync" := fromRec."Customer Enable Sync";
                toRec."Customer Field No Ext. Ref." := fromRec."Customer Field No Ext. Ref.";
                toRec."Customer Field No Ref. 2" := fromRec."Customer Field No Ref. 2";
                toRec."Customer Template" := fromRec."Customer Template";
                toRec."Date Parameter" := fromRec."Date Parameter";
                toRec."Def. Duty Shortcut Dim. 1 Code" := fromRec."Def. Duty Shortcut Dim. 1 Code";
                toRec."Def. Duty Shortcut Dim. 2 Code" := fromRec."Def. Duty Shortcut Dim. 2 Code";
                toRec."Def. Inv. Shortcut Dim. 1 Code" := fromRec."Def. Inv. Shortcut Dim. 1 Code";
                toRec."Def. Inv. Shortcut Dim. 2 Code" := fromRec."Def. Inv. Shortcut Dim. 2 Code";
                toRec."Description" := fromRec."Description";
                toRec."Direction" := fromRec."Direction";
                toRec."Disable FA Registration" := fromRec."Disable FA Registration";
                toRec."Disable G/L Acc. Registration" := fromRec."Disable G/L Acc. Registration";
                toRec."Disable Item Registration" := fromRec."Disable Item Registration";
                toRec."Discount G/L Account No." := fromRec."Discount G/L Account No.";
                toRec."Discount Line Description" := fromRec."Discount Line Description";
                toRec."Discount VAT Prod. Post. Grp." := fromRec."Discount VAT Prod. Post. Grp.";
                toRec."Document Nos." := fromRec."Document Nos.";
                toRec."Enable Duty Man." := fromRec."Enable Duty Man.";
                toRec."Enable invoicing Cost Man." := fromRec."Enable invoicing Cost Man.";
                if fromRec."Error Flag".HasValue() then begin
                    fromRec.CalcFields("Error Flag");
                    fromRec."Error Flag".CreateInStream(IStream);
                    toRec."Error Flag".CreateOutStream(OStream);
                    CopyStream(OStream, IStream);
                end;
                toRec."Force Posting Data" := fromRec."Force Posting Data";
                toRec."Free Inv. VAT Prod. Post. Grp" := fromRec."Free Inv. VAT Prod. Post. Grp";
                toRec."Free Invoice Description" := fromRec."Free Invoice Description";
                toRec."G/L Account Cost Invoice" := fromRec."G/L Account Cost Invoice";
                toRec."G/L Account Virtual Duty" := fromRec."G/L Account Virtual Duty";
                toRec."Integr. Table Filter Parameter" := fromRec."Integr. Table Filter Parameter";
                toRec."Integr. Table Parameter 1" := fromRec."Integr. Table Parameter 1";
                toRec."Integr. Table Parameter 2" := fromRec."Integr. Table Parameter 2";
                if fromRec."Job Queue -Arch. Flag".HasValue() then begin
                    fromRec.CalcFields("Job Queue -Arch. Flag");
                    fromRec."Job Queue -Arch. Flag".CreateInStream(IStream);
                    toRec."Job Queue -Arch. Flag".CreateOutStream(OStream);
                    CopyStream(OStream, IStream);
                end;
                toRec."Job Queue Category Code Arch." := fromRec."Job Queue Category Code Arch.";
                toRec."Job Queue Category Code Proc." := fromRec."Job Queue Category Code Proc.";
                toRec."Job Queue Entry ID Arch." := fromRec."Job Queue Entry ID Arch.";
                toRec."Job Queue Entry ID Proc." := fromRec."Job Queue Entry ID Proc.";
                if fromRec."Job Queue -Process Flag".HasValue() then begin
                    fromRec.CalcFields("Job Queue -Process Flag");
                    fromRec."Job Queue -Process Flag".CreateInStream(IStream);
                    toRec."Job Queue -Process Flag".CreateOutStream(OStream);
                    CopyStream(OStream, IStream);
                end;
                toRec."Journal Action" := fromRec."Journal Action";
                toRec."Journal Batch Name" := fromRec."Journal Batch Name";
                toRec."Journal Template Name" := fromRec."Journal Template Name";
                toRec."Last Date Time Syncronize" := fromRec."Last Date Time Syncronize";
                toRec."Last Entry No." := fromRec."Last Entry No.";
                toRec."Lines Description" := fromRec."Lines Description";
                toRec."Mapping Cat. Shortcut Dim. 2" := fromRec."Mapping Cat. Shortcut Dim. 2";
                toRec."Navigate Page ID" := fromRec."Navigate Page ID";
                toRec."Posting" := fromRec."Posting";
                toRec."Posting Type" := fromRec."Posting Type";
                toRec."Process Codeunit ID" := fromRec."Process Codeunit ID";
                toRec."Qty Handle Method" := fromRec."Qty Handle Method";
                toRec."Reason Code" := fromRec."Reason Code";
                toRec."Release Document" := fromRec."Release Document";
                toRec."Rounding G/L Account" := fromRec."Rounding G/L Account";
                toRec."Rounding Margin" := fromRec."Rounding Margin";
                toRec."Rounding VAT Prod. Post. Grp." := fromRec."Rounding VAT Prod. Post. Grp.";
                toRec."Shp. Cost Gen. Prd. Post. Grp." := fromRec."Shp. Cost Gen. Prd. Post. Grp.";
                toRec."Shp. Cost VAT Prd. Post. Grp." := fromRec."Shp. Cost VAT Prd. Post. Grp.";
                toRec."Skip Check Row Amount" := fromRec."Skip Check Row Amount";
                toRec."Skip Document Check Totals" := fromRec."Skip Document Check Totals";
                toRec."sorting" := fromRec."sorting";
                toRec."Source Document" := fromRec."Source Document";
                toRec."Source Document Type" := fromRec."Source Document Type";
                toRec."Source Table ID" := fromRec."Source Table ID";
                toRec."Stats Mode" := fromRec."Stats Mode";
                toRec."Status" := fromRec."Status";
                toRec."Syncronization Mode" := fromRec."Syncronization Mode";
                toRec."Table Filter Parameter" := fromRec."Table Filter Parameter";
                toRec."Table Parameter 1" := fromRec."Table Parameter 1";
                toRec."Table Parameter 2" := fromRec."Table Parameter 2";
                toRec."Time Parameter" := fromRec."Time Parameter";
                if fromRec."To Process Flag".HasValue() then begin
                    fromRec.CalcFields("To Process Flag");
                    fromRec."To Process Flag".CreateInStream(IStream);
                    toRec."To Process Flag".CreateOutStream(OStream);
                    CopyStream(OStream, IStream);
                end;
                toRec."Type" := fromRec."Type";
                toRec."Typology" := fromRec."Typology";
                toRec."Use MMI Document No." := fromRec."Use MMI Document No.";
                toRec."VAT Prod. Posting Group" := fromRec."VAT Prod. Posting Group";
                toRec."Virtual Duty Description" := fromRec."Virtual Duty Description";
                toRec."Web Profile Code" := fromRec."Web Profile Code";
                toRec.Insert();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate65002"()
    var
        fromRec: Record "BCN MMI Log Entry";
        toRec: Record "EOS MMI Log Entry";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.Init();
                toRec."Date and Time" := fromRec."Date and Time";
                toRec."Description" := fromRec."Description";
                toRec."Entry No." := fromRec."Entry No.";
                toRec."Field No." := fromRec."Field No.";
                toRec."Field Value" := fromRec."Field Value";
                toRec."Primary Key" := fromRec."Primary Key";
                toRec."Primary Key Field 1 No." := fromRec."Primary Key Field 1 No.";
                toRec."Primary Key Field 1 Value" := fromRec."Primary Key Field 1 Value";
                toRec."Primary Key Field 2 No." := fromRec."Primary Key Field 2 No.";
                toRec."Primary Key Field 2 Value" := fromRec."Primary Key Field 2 Value";
                toRec."Primary Key Field 3 No." := fromRec."Primary Key Field 3 No.";
                toRec."Primary Key Field 3 Value" := fromRec."Primary Key Field 3 Value";
                toRec."Record ID" := fromRec."Record ID";
                toRec."Setup Group Code" := fromRec."Setup Group Code";
                toRec."Table No." := fromRec."Table No.";
                toRec."Time" := fromRec."Time";
                toRec."Type" := fromRec."Type";
                toRec."Type of Change" := fromRec."Type of Change";
                toRec."User ID" := fromRec."User ID";
                toRec.Insert();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate65003"()
    var
        fromRec: Record "BCN MMI General Setup";
        toRec: Record "EOS MMI General Setup";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.Init();
                if fromRec."Error Flag".HasValue() then begin
                    fromRec.CalcFields("Error Flag");
                    fromRec."Error Flag".CreateInStream(IStream);
                    toRec."Error Flag".CreateOutStream(OStream);
                    CopyStream(OStream, IStream);
                end;
                if fromRec."Job Queue -Status Error Flag".HasValue() then begin
                    fromRec.CalcFields("Job Queue -Status Error Flag");
                    fromRec."Job Queue -Status Error Flag".CreateInStream(IStream);
                    toRec."Job Queue -Status Error Flag".CreateOutStream(OStream);
                    CopyStream(OStream, IStream);
                end;
                if fromRec."Job Queue -Status OK Flag".HasValue() then begin
                    fromRec.CalcFields("Job Queue -Status OK Flag");
                    fromRec."Job Queue -Status OK Flag".CreateInStream(IStream);
                    toRec."Job Queue -Status OK Flag".CreateOutStream(OStream);
                    CopyStream(OStream, IStream);
                end;
                if fromRec."Job Queue -Status On Hold Flag".HasValue() then begin
                    fromRec.CalcFields("Job Queue -Status On Hold Flag");
                    fromRec."Job Queue -Status On Hold Flag".CreateInStream(IStream);
                    toRec."Job Queue -Status On Hold Flag".CreateOutStream(OStream);
                    CopyStream(OStream, IStream);
                end;
                toRec."Primary Key" := fromRec."Primary Key";
                if fromRec."To Process Flag".HasValue() then begin
                    fromRec.CalcFields("To Process Flag");
                    fromRec."To Process Flag".CreateInStream(IStream);
                    toRec."To Process Flag".CreateOutStream(OStream);
                    CopyStream(OStream, IStream);
                end;
                toRec.Insert();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate65004"()
    var
        fromRec: Record "BCN MMI Record Archive";
        toRec: Record "EOS MMI Record Archive";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.Init();
                toRec."Archived By" := fromRec."Archived By";
                toRec."Bar Code" := fromRec."Bar Code";
                toRec."Bin Code" := fromRec."Bin Code";
                toRec."Code" := fromRec."Code";
                toRec."Connection Name" := fromRec."Connection Name";
                toRec."Create Parameter" := fromRec."Create Parameter";
                toRec."Date Archived" := fromRec."Date Archived";
                toRec."Date Parameter" := fromRec."Date Parameter";
                toRec."Document Line No." := fromRec."Document Line No.";
                toRec."Document No." := fromRec."Document No.";
                toRec."Entry No." := fromRec."Entry No.";
                toRec."Error Message" := fromRec."Error Message";
                toRec."Expired Date" := fromRec."Expired Date";
                toRec."Group Primary Key" := fromRec."Group Primary Key";
                toRec."Import Date" := fromRec."Import Date";
                toRec."Import Time" := fromRec."Import Time";
                toRec."In Process" := fromRec."In Process";
                toRec."Is Error" := fromRec."Is Error";
                toRec."Item No." := fromRec."Item No.";
                toRec."Journal Batch Name Parameter" := fromRec."Journal Batch Name Parameter";
                toRec."Journal Temp. Name Parameter" := fromRec."Journal Temp. Name Parameter";
                toRec."Location Code" := fromRec."Location Code";
                toRec."Lot No." := fromRec."Lot No.";
                toRec."New Bin Code" := fromRec."New Bin Code";
                toRec."New Location Code" := fromRec."New Location Code";
                toRec."Posted" := fromRec."Posted";
                toRec."Posting Parameter" := fromRec."Posting Parameter";
                toRec."Posting Type Parameter" := fromRec."Posting Type Parameter";
                toRec."Processed" := fromRec."Processed";
                toRec."Processing Date" := fromRec."Processing Date";
                toRec."Processing Time" := fromRec."Processing Time";
                toRec."Quantity" := fromRec."Quantity";
                toRec."Source Document Parameter" := fromRec."Source Document Parameter";
                toRec."Source Error Message" := fromRec."Source Error Message";
                toRec."Source Line No." := fromRec."Source Line No.";
                toRec."Source No." := fromRec."Source No.";
                toRec."Source Status" := fromRec."Source Status";
                toRec."Source Subline No." := fromRec."Source Subline No.";
                toRec."Source Subtype" := fromRec."Source Subtype";
                toRec."Source Type" := fromRec."Source Type";
                toRec."Time Archived" := fromRec."Time Archived";
                toRec."Time Parameter" := fromRec."Time Parameter";
                toRec."Type" := fromRec."Type";
                toRec."Type Parameter" := fromRec."Type Parameter";
                toRec."Warning" := fromRec."Warning";
                toRec."Zone Code" := fromRec."Zone Code";
                toRec.Insert();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate65005"()
    var
        fromRec: Record "BCN MM Check Buffer";
        toRec: Record "EOS MMI Check Buffer";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.Init();
                toRec."Document No_" := fromRec."Document No_";
                toRec."Error Type" := fromRec."Error Type";
                toRec."File Name" := fromRec."File Name";
                toRec."Posting Date" := fromRec."Posting Date";
                toRec."Reference Entry No." := fromRec."Reference Entry No.";
                toRec."VAT Bus. Posting Group" := fromRec."VAT Bus. Posting Group";
                toRec.Insert();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate65006"()
    var
        fromRec: Record "BCN MMI Location Flow Setup";
        toRec: Record "EOS MMI Location Flow Setup";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.Init();
                toRec."Location Code" := fromRec."Location Code";
                toRec."Reason Code" := fromRec."Reason Code";
                toRec."Template Code" := fromRec."Template Code";
                toRec."Typology" := fromRec."Typology";
                toRec.Insert();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate65007"()
    var
        fromRec: Record "BCN MMI Data Exch. Log Entry";
        toRec: Record "EOS MMI Data Exch. Log Entry";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.Init();
                toRec."Data Exch. Def Code" := fromRec."Data Exch. Def Code";
                toRec."Data Exch. No" := fromRec."Data Exch. No";
                toRec."Data Process No." := fromRec."Data Process No.";
                toRec."Document No." := fromRec."Document No.";
                toRec."Entry No." := fromRec."Entry No.";
                toRec."MMI Reason Code" := fromRec."MMI Reason Code";
                toRec."MMI Typology" := fromRec."MMI Typology";
                toRec.Insert();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate65008"()
    var
        fromRec: Record "BCN MMI Flow Mapping";
        toRec: Record "EOS MMI Flow Mapping";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.Init();
                toRec."Field ID" := fromRec."Field ID";
                toRec."Line No" := fromRec."Line No";
                toRec."MMI Reason Code" := fromRec."MMI Reason Code";
                toRec."Source Value" := fromRec."Source Value";
                toRec."Target Value" := fromRec."Target Value";
                toRec."Typology" := fromRec."Typology";
                toRec.Insert();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate67000"()
    var
        fromRec: Record "BCN Shop Connector Setup";
        toRec: Record "EOS Shop Connector Setup";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.Init();
                toRec."Active variant management" := fromRec."Active variant management";
                toRec."API Key" := fromRec."API Key";
                toRec."API Password" := fromRec."API Password";
                toRec."API Sync. Order Filter" := fromRec."API Sync. Order Filter";
                toRec."Company Activities" := fromRec."Company Activities";
                toRec."Customer Mgmt. Mode" := fromRec."Customer Mgmt. Mode";
                toRec."Customer Template Code" := fromRec."Customer Template Code";
                toRec."Item - Fast Started" := fromRec."Item - Fast Started";
                toRec."Item Template Code" := fromRec."Item Template Code";
                toRec."Mandatory Salesperson Matching" := fromRec."Mandatory Salesperson Matching";
                toRec."Orders Sync" := fromRec."Orders Sync";
                toRec."Orders Sync - Last Date Time" := fromRec."Orders Sync - Last Date Time";
                toRec."Pricelist ID" := fromRec."Pricelist ID";
                toRec."Product category" := fromRec."Product category";
                toRec."Send Status Change" := fromRec."Send Status Change";
                toRec."Shop Location" := fromRec."Shop Location";
                toRec."Shop Platform" := fromRec."Shop Platform";
                toRec."Stock Sync" := fromRec."Stock Sync";
                toRec."Stock Sync. API Delay" := fromRec."Stock Sync. API Delay";
                toRec."URL Shop" := fromRec."URL Shop";
                toRec."VAT Class" := fromRec."VAT Class";
                toRec."VAT Group ID" := fromRec."VAT Group ID";
                toRec.Insert();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate67001"()
    var
        fromRec: Record "BCN Shop Item Reference";
        toRec: Record "EOS Shop Item Reference";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.Init();
                toRec."Item No." := fromRec."Item No.";
                toRec."Shop ID" := fromRec."Shop ID";
                toRec."Shop Last Error" := fromRec."Shop Last Error";
                toRec."Shop Platform" := fromRec."Shop Platform";
                toRec."Shop Product Link" := fromRec."Shop Product Link";
                toRec."Shop Sync Status" := fromRec."Shop Sync Status";
                toRec."Variant Code" := fromRec."Variant Code";
                toRec.Insert();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate67002"()
    var
        fromRec: Record "BCN Shop Customer Reference";
        toRec: Record "EOS Shop Customer Reference";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.Init();
                toRec."Customer No." := fromRec."Customer No.";
                toRec."Piattaforma Shop" := fromRec."Piattaforma Shop";
                toRec."Shop Customer Link" := fromRec."Shop Customer Link";
                toRec."Shop ID" := fromRec."Shop ID";
                toRec."Shop last error" := fromRec."Shop last error";
                toRec."Shop Sync Status" := fromRec."Shop Sync Status";
                toRec.Insert();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate67003"()
    var
        fromRec: Record "BCN Shop Inventory";
        toRec: Record "EOS Shop Inventory";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.Init();
                toRec."Location Code" := fromRec."Location Code";
                toRec."Quantity" := fromRec."Quantity";
                toRec."Shop ID" := fromRec."Shop ID";
                toRec."Shop Last Error" := fromRec."Shop Last Error";
                toRec."Shop Platform" := fromRec."Shop Platform";
                toRec."Shop Sync Status" := fromRec."Shop Sync Status";
                toRec.Insert();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate67004"()
    var
        fromRec: Record "BCN Shop Sales Document Status";
        toRec: Record "EOS Shop Sales Document Status";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.Init();
                toRec."Doc. Sync Status" := fromRec."Doc. Sync Status";
                toRec."Document No." := fromRec."Document No.";
                toRec."Document Type" := fromRec."Document Type";
                toRec."Operation Date" := fromRec."Operation Date";
                toRec."Shop Order Id" := fromRec."Shop Order Id";
                toRec."Shop Platform" := fromRec."Shop Platform";
                toRec.Insert();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate67005"()
    var
        fromRec: Record "BCN Shop Customer Setup";
        toRec: Record "EOS Shop Customer Setup";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.Init();
                toRec."Country/Region Code" := fromRec."Country/Region Code";
                toRec."Customer No." := fromRec."Customer No.";
                toRec."Customer Template No." := fromRec."Customer Template No.";
                toRec."Territory Code" := fromRec."Territory Code";
                toRec.Insert();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate67006"()
    var
        fromRec: Record "BCN Shop Payment Methods";
        toRec: Record "EOS Shop Payment Methods";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.Init();
                toRec."Payment Method" := fromRec."Payment Method";
                toRec."Payment Term" := fromRec."Payment Term";
                toRec."Shop Method Name" := fromRec."Shop Method Name";
                toRec."Shop Platform" := fromRec."Shop Platform";
                toRec.Insert();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate67500"()
    var
        fromRec: Record "EOL Contract API";
        toRec: Record "EOS Contract API";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.Init();
                toRec."Body" := fromRec."Body";
                toRec."Endpoint" := fromRec."Endpoint";
                toRec."Line No." := fromRec."Line No.";
                toRec."Method" := fromRec."Method";
                toRec."Response" := fromRec."Response";
                toRec."Status Code" := fromRec."Status Code";
                toRec.Insert();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate68000"()
    var
        fromRec: Record "BCN Process";
        toRec: Record "EOS Process";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.Init();
                toRec."Answer" := fromRec."Answer";
                toRec."Answer Type" := fromRec."Answer Type";
                toRec."Answers Bool Don't Known Msg" := fromRec."Answers Bool Don't Known Msg";
                toRec."Answers Boolean" := fromRec."Answers Boolean";
                toRec."Answers Boolean Don't Known" := fromRec."Answers Boolean Don't Known";
                toRec."Answers Boolean No" := fromRec."Answers Boolean No";
                toRec."Answers Boolean Yes" := fromRec."Answers Boolean Yes";
                toRec."Answers Date Time" := fromRec."Answers Date Time";
                toRec."Answers User ID" := fromRec."Answers User ID";
                toRec."Data Migration - Package" := fromRec."Data Migration - Package";
                toRec."Data Migration Flexible" := fromRec."Data Migration Flexible";
                toRec."Description" := fromRec."Description";
                toRec."Extended Description" := fromRec."Extended Description";
                toRec."Interview Sequence" := fromRec."Interview Sequence";
                toRec."Level" := fromRec."Level";
                toRec."Link Get Started" := fromRec."Link Get Started";
                toRec."Main Link Docs 1" := fromRec."Main Link Docs 1";
                toRec."Main Link Docs 2" := fromRec."Main Link Docs 2";
                toRec."Main Object Filters" := fromRec."Main Object Filters";
                toRec."Main Object ID" := fromRec."Main Object ID";
                toRec."Main Object Type" := fromRec."Main Object Type";
                toRec."Main Questions" := fromRec."Main Questions";
                toRec."Main Special Codeunit" := fromRec."Main Special Codeunit";
                toRec."Prev. Entry No." := fromRec."Prev. Entry No.";
                toRec."Process Area Code" := fromRec."Process Area Code";
                toRec."Process Code" := fromRec."Process Code";
                toRec."Process Enabled" := fromRec."Process Enabled";
                toRec."Process Module" := fromRec."Process Module";
                toRec."Sequence" := fromRec."Sequence";
                toRec."Setup Flexible" := fromRec."Setup Flexible";
                toRec."Template Necessary" := fromRec."Template Necessary";
                toRec."Training Completed" := fromRec."Training Completed";
                toRec."Training Sequence" := fromRec."Training Sequence";
                toRec."Type" := fromRec."Type";
                toRec."Type Level" := fromRec."Type Level";
                toRec.Insert();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate68001"()
    var
        fromRec: Record "BCN Process Module";
        toRec: Record "EOS Process Module";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.Init();
                toRec."CheckList Item Description" := fromRec."CheckList Item Description";
                toRec."CheckList Item Keywords" := fromRec."CheckList Item Keywords";
                toRec."CheckList Item Short Title" := fromRec."CheckList Item Short Title";
                toRec."CheckList Item Title" := fromRec."CheckList Item Title";
                toRec."Code" := fromRec."Code";
                toRec."Description" := fromRec."Description";
                toRec."Enabled" := fromRec."Enabled";
                toRec."Live At" := fromRec."Live At";
                toRec."Live By" := fromRec."Live By";
                toRec."OnBoarding Phase No." := fromRec."OnBoarding Phase No.";
                toRec."Permission Premium" := fromRec."Permission Premium";
                toRec."Presale Icon" := fromRec."Presale Icon";
                toRec."Presale Visible" := fromRec."Presale Visible";
                toRec."Priority" := fromRec."Priority";
                toRec.Insert();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate68002"()
    var
        fromRec: Record "BCN Help Me Ticket";
        toRec: Record "EOS Help Me Ticket";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.Init();
                toRec."BC Page Link" := fromRec."BC Page Link";
                toRec."CRM Ticket No." := fromRec."CRM Ticket No.";
                toRec."DateTime Ticket Sent" := fromRec."DateTime Ticket Sent";
                toRec."Description" := fromRec."Description";
                toRec."Error CallStack" := fromRec."Error CallStack";
                toRec."Error Code" := fromRec."Error Code";
                toRec."Last Error" := fromRec."Last Error";
                toRec."No." := fromRec."No.";
                toRec."Source RecordID" := fromRec."Source RecordID";
                toRec."Status" := fromRec."Status";
                toRec."Title" := fromRec."Title";
                toRec."Type" := fromRec."Type";
                toRec."UserId Ticket Sent" := fromRec."UserId Ticket Sent";
                toRec.Insert();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate68003"()
    var
        fromRec: Record "BCN SoSmart General Setup";
        toRec: Record "EOS SoSmart General Setup";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.Init();
                toRec."Chatbot Visible" := fromRec."Chatbot Visible";
                toRec."Default Worksheet Code" := fromRec."Default Worksheet Code";
                toRec."Entry No." := fromRec."Entry No.";
                toRec."EOL Industry" := fromRec."EOL Industry";
                toRec."G/L Entry Blocked" := fromRec."G/L Entry Blocked";
                toRec."Help Me Ticket Series No." := fromRec."Help Me Ticket Series No.";
                toRec."Is Template Company" := fromRec."Is Template Company";
                toRec."Item Ledger Entry Blocked" := fromRec."Item Ledger Entry Blocked";
                toRec."Last Worksheet Upload Datetime" := fromRec."Last Worksheet Upload Datetime";
                toRec."Manage Permission By Module" := fromRec."Manage Permission By Module";
                toRec."Master Data Blocked" := fromRec."Master Data Blocked";
                toRec."OnBoarding Current Phase No." := fromRec."OnBoarding Current Phase No.";
                toRec."OnBoarding Skip FAQ Check" := fromRec."OnBoarding Skip FAQ Check";
                toRec."Order Blocked" := fromRec."Order Blocked";
                toRec."Project Start Date" := fromRec."Project Start Date";
                toRec."SoSmart Project Status" := fromRec."SoSmart Project Status";
                toRec."Std. Worksheet Duration" := fromRec."Std. Worksheet Duration";
                toRec."Sync Logs On Demand" := fromRec."Sync Logs On Demand";
                toRec."User Group Premium" := fromRec."User Group Premium";
                toRec."Video - Embedded Play" := fromRec."Video - Embedded Play";
                toRec."Worksheet Dedicated Daily Hrs" := fromRec."Worksheet Dedicated Daily Hrs";
                toRec."Worksheet Setup Completed" := fromRec."Worksheet Setup Completed";
                toRec.Insert();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate68004"()
    var
        fromRec: Record "BCN Process Test";
        toRec: Record "EOS Process Test";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.Init();
                toRec."Completed Force" := fromRec."Completed Force";
                toRec."CRM Reference Id" := fromRec."CRM Reference Id";
                toRec."Data Migration Package" := fromRec."Data Migration Package";
                toRec."DateTime Test Completed" := fromRec."DateTime Test Completed";
                toRec."DateTime Test Started" := fromRec."DateTime Test Started";
                toRec."Description" := fromRec."Description";
                toRec."Docs 1 Link" := fromRec."Docs 1 Link";
                toRec."Docs 2 Link" := fromRec."Docs 2 Link";
                toRec."Enabled" := fromRec."Enabled";
                toRec."Estimated Duration" := fromRec."Estimated Duration";
                toRec."Important" := fromRec."Important";
                toRec."Level" := fromRec."Level";
                toRec."Line No." := fromRec."Line No.";
                toRec."Linked Pages" := fromRec."Linked Pages";
                toRec."Object ID" := fromRec."Object ID";
                toRec."Object Type" := fromRec."Object Type";
                toRec."Process Code" := fromRec."Process Code";
                toRec."Process Enabled" := fromRec."Process Enabled";
                toRec."Process Module" := fromRec."Process Module";
                toRec."Process Test Type" := fromRec."Process Test Type";
                toRec."Project Status" := fromRec."Project Status";
                toRec."Test Completed" := fromRec."Test Completed";
                toRec."Training Group Description" := fromRec."Training Group Description";
                toRec."Training Sequence" := fromRec."Training Sequence";
                toRec."UserId Test Completed" := fromRec."UserId Test Completed";
                toRec."UserId Test Started" := fromRec."UserId Test Started";
                toRec."Video Link" := fromRec."Video Link";
                toRec."Video Link Decode" := fromRec."Video Link Decode";
                toRec.Insert();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate68005"()
    var
        fromRec: Record "BCN Process FAQ";
        toRec: Record "EOS Process FAQ";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.Init();
                toRec."Customer Visible" := fromRec."Customer Visible";
                toRec."Duration" := fromRec."Duration";
                toRec."Fundamentals Completed" := fromRec."Fundamentals Completed";
                toRec."Fundamentals Mandatory" := fromRec."Fundamentals Mandatory";
                toRec."Fundamentals Visible" := fromRec."Fundamentals Visible";
                toRec."Hashtag Docs" := fromRec."Hashtag Docs";
                toRec."Like Count" := fromRec."Like Count";
                toRec."Main" := fromRec."Main";
                toRec."OnBoarding Answers Boolean No" := fromRec."OnBoarding Answers Boolean No";
                toRec."OnBoarding Answers Boolean Yes" := fromRec."OnBoarding Answers Boolean Yes";
                toRec."OnBoarding Completed" := fromRec."OnBoarding Completed";
                toRec."OnBoarding Completed At" := fromRec."OnBoarding Completed At";
                toRec."OnBoarding Completed By" := fromRec."OnBoarding Completed By";
                toRec."OnBoarding Feedback" := fromRec."OnBoarding Feedback";
                toRec."OnBoarding Interview Index" := fromRec."OnBoarding Interview Index";
                toRec."OnBoarding Mandatory" := fromRec."OnBoarding Mandatory";
                toRec."OnBoarding Mode" := fromRec."OnBoarding Mode";
                toRec."OnBoarding Ranking" := fromRec."OnBoarding Ranking";
                toRec."OnBoarding Ref To Module" := fromRec."OnBoarding Ref To Module";
                toRec."OnBoarding Ref To Process Code" := fromRec."OnBoarding Ref To Process Code";
                toRec."OnBoarding Refer To FAQ Line" := fromRec."OnBoarding Refer To FAQ Line";
                toRec."OnBoarding Refer To Test Line" := fromRec."OnBoarding Refer To Test Line";
                toRec."OnBoarding Visible" := fromRec."OnBoarding Visible";
                toRec."Presale Group Description" := fromRec."Presale Group Description";
                toRec."Presale Icon" := fromRec."Presale Icon";
                toRec."Presales Visible" := fromRec."Presales Visible";
                toRec."Process Code" := fromRec."Process Code";
                toRec."Process FAQ Line No." := fromRec."Process FAQ Line No.";
                toRec."Process Module" := fromRec."Process Module";
                toRec."Process Test Line No." := fromRec."Process Test Line No.";
                toRec."Public Visible" := fromRec."Public Visible";
                toRec."Questions" := fromRec."Questions";
                toRec."Ranking Absolute" := fromRec."Ranking Absolute";
                toRec.Insert();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate68006"()
    var
        fromRec: Record "BCN Use Case";
        toRec: Record "EOS Use Case";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.Init();
                toRec."Code" := fromRec."Code";
                toRec."Description" := fromRec."Description";
                toRec.Insert();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate68007"()
    var
        fromRec: Record "BCN Use Case Line";
        toRec: Record "EOS Use Case Line";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.Init();
                toRec."Line No." := fromRec."Line No.";
                toRec."Process Code" := fromRec."Process Code";
                toRec."Process Module" := fromRec."Process Module";
                toRec."Process Test Line No." := fromRec."Process Test Line No.";
                toRec."Use Case Code" := fromRec."Use Case Code";
                toRec.Insert();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate68008"()
    var
        fromRec: Record "BCN Translation Entry";
        toRec: Record "EOS Translation Entry";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.Init();
                toRec."Field ID" := fromRec."Field ID";
                toRec."Language Code" := fromRec."Language Code";
                toRec."Source Record ID" := fromRec."Source Record ID";
                toRec."Table ID" := fromRec."Table ID";
                toRec."Translated Value" := fromRec."Translated Value";
                toRec.Insert();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate68009"()
    var
        fromRec: Record "BCN Translation Setup";
        toRec: Record "EOS Translation Setup";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.Init();
                toRec."Azure Translator Endpoint" := fromRec."Azure Translator Endpoint";
                toRec."Azure Translator Key" := fromRec."Azure Translator Key";
                toRec."Azure Translator Location" := fromRec."Azure Translator Location";
                toRec."Default Language" := fromRec."Default Language";
                toRec."Language Setup" := fromRec."Language Setup";
                toRec."Primary Key" := fromRec."Primary Key";
                toRec.Insert();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate68010"()
    var
        fromRec: Record "BCN Translation Setup Table";
        toRec: Record "EOS Translation Setup Table";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.Init();
                toRec."Auto Translate" := fromRec."Auto Translate";
                toRec."Field No." := fromRec."Field No.";
                toRec."Table No." := fromRec."Table No.";
                toRec.Insert();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate68011"()
    var
        fromRec: Record "BCN Translation Setup Language";
        toRec: Record "EOS Translation Setup Language";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.Init();
                toRec."Language ID" := fromRec."Language ID";
                toRec.Insert();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate68015"()
    var
        fromRec: Record "BCN Onboarding Worksheet";
        toRec: Record "EOS Onboarding Worksheet";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.Init();
                toRec."Code" := fromRec."Code";
                toRec."Description" := fromRec."Description";
                toRec."External System Id" := fromRec."External System Id";
                toRec."Lead Id" := fromRec."Lead Id";
                toRec."LeadMail" := fromRec."LeadMail";
                toRec."Type" := fromRec."Type";
                toRec.Insert();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate68016"()
    var
        fromRec: Record "BCN Onboarding Worksheet Line";
        toRec: Record "EOS Onboarding Worksheet Line";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.Init();
                toRec."Completion %" := fromRec."Completion %";
                toRec."Critical" := fromRec."Critical";
                if fromRec."Customer Note".HasValue() then begin
                    fromRec.CalcFields("Customer Note");
                    fromRec."Customer Note".CreateInStream(IStream);
                    toRec."Customer Note".CreateOutStream(OStream);
                    CopyStream(OStream, IStream);
                end;
                toRec."Description" := fromRec."Description";
                toRec."Duration" := fromRec."Duration";
                toRec."Enabled" := fromRec."Enabled";
                toRec."End Date" := fromRec."End Date";
                toRec."Estimated End Date" := fromRec."Estimated End Date";
                toRec."External System Id" := fromRec."External System Id";
                toRec."GAP" := fromRec."GAP";
                toRec."Important" := fromRec."Important";
                toRec."In Scope" := fromRec."In Scope";
                toRec."Indentation" := fromRec."Indentation";
                toRec."Line No." := fromRec."Line No.";
                toRec."Line Type" := fromRec."Line Type";
                if fromRec."Note".HasValue() then begin
                    fromRec.CalcFields("Note");
                    fromRec."Note".CreateInStream(IStream);
                    toRec."Note".CreateOutStream(OStream);
                    CopyStream(OStream, IStream);
                end;
                toRec."Process Code" := fromRec."Process Code";
                toRec."Process Module" := fromRec."Process Module";
                toRec."Process Test Completed" := fromRec."Process Test Completed";
                toRec."Process Test Late" := fromRec."Process Test Late";
                toRec."Process Test Line No." := fromRec."Process Test Line No.";
                toRec."Process Test Remaining" := fromRec."Process Test Remaining";
                toRec."Start Date" := fromRec."Start Date";
                toRec."Status" := fromRec."Status";
                toRec."Test type" := fromRec."Test type";
                toRec."User Id" := fromRec."User Id";
                toRec."Worksheet Code" := fromRec."Worksheet Code";
                toRec.Insert();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate68020"()
    var
        fromRec: Record "BCN Log Message";
        toRec: Record "EOS Log Message";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.Init();
                toRec."Dimension 1 Value" := fromRec."Dimension 1 Value";
                toRec."Dimension 2 Value" := fromRec."Dimension 2 Value";
                toRec."End DateTime" := fromRec."End DateTime";
                toRec."Entry No." := fromRec."Entry No.";
                toRec."Error Message" := fromRec."Error Message";
                toRec."Has Error" := fromRec."Has Error";
                toRec."Log Duration" := fromRec."Log Duration";
                toRec."Message" := fromRec."Message";
                toRec."Processed" := fromRec."Processed";
                toRec."Reference Entry No." := fromRec."Reference Entry No.";
                toRec."Source ID" := fromRec."Source ID";
                toRec."Source System ID" := fromRec."Source System ID";
                toRec."Source Type" := fromRec."Source Type";
                toRec."Start DateTime" := fromRec."Start DateTime";
                toRec."User ID" := fromRec."User ID";
                toRec.Insert();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate68021"()
    var
        fromRec: Record "BCN Knowledge Article";
        toRec: Record "EOS Knowledge Article";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.Init();
                toRec."Id" := fromRec."Id";
                toRec."Title" := fromRec."Title";
                toRec.Insert();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate68022"()
    var
        fromRec: Record "EOL Migration Entity";
        toRec: Record "EOS Migration Entity";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.Init();
                toRec."Advanced Context" := fromRec."Advanced Context";
                toRec."Category Column No." := fromRec."Category Column No.";
                toRec."Code" := fromRec."Code";
                toRec."Data Process Entity Code" := fromRec."Data Process Entity Code";
                toRec."Data Process Model Code" := fromRec."Data Process Model Code";
                toRec."Data Process No." := fromRec."Data Process No.";
                toRec."Description" := fromRec."Description";
                toRec."Empty Trace Generated" := fromRec."Empty Trace Generated";
                toRec."Enabled" := fromRec."Enabled";
                toRec."Group Code" := fromRec."Group Code";
                toRec."Group Order" := fromRec."Group Order";
                toRec."Order" := fromRec."Order";
                toRec."Question" := fromRec."Question";
                toRec."Simple Context" := fromRec."Simple Context";
                toRec."Status" := fromRec."Status";
                toRec."Table ID" := fromRec."Table ID";
                toRec."Type" := fromRec."Type";
                toRec."Wizard Page ID" := fromRec."Wizard Page ID";
                toRec.Insert();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate68023"()
    var
        fromRec: Record "EOL Migration Entity Field";
        toRec: Record "EOS Migration Entity Field";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.Init();
                toRec."Data Exch. Def. Code" := fromRec."Data Exch. Def. Code";
                toRec."Data Exch. Line Def. Code" := fromRec."Data Exch. Line Def. Code";
                toRec."Field ID" := fromRec."Field ID";
                toRec."Field Type" := fromRec."Field Type";
                toRec."Primary Key" := fromRec."Primary Key";
                toRec."Priority" := fromRec."Priority";
                toRec."Table ID" := fromRec."Table ID";
                toRec.Insert();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate68024"()
    var
        fromRec: Record "EOL Migration Entity Mapping";
        toRec: Record "EOS Migration Entity Mapping";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.Init();
                toRec."Constant" := fromRec."Constant";
                toRec."Data Exch. Column No." := fromRec."Data Exch. Column No.";
                toRec."Data Exch. Def. Code" := fromRec."Data Exch. Def. Code";
                toRec."Data Exch. Line Def. Code" := fromRec."Data Exch. Line Def. Code";
                toRec."Entry No." := fromRec."Entry No.";
                toRec."Field ID" := fromRec."Field ID";
                toRec."Mapping Category Code" := fromRec."Mapping Category Code";
                toRec."Mapping Type" := fromRec."Mapping Type";
                toRec."Primary Key" := fromRec."Primary Key";
                toRec."Skip Category Suggestion" := fromRec."Skip Category Suggestion";
                toRec."Table ID" := fromRec."Table ID";
                toRec."Transformation Rule" := fromRec."Transformation Rule";
                toRec.Insert();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate68025"()
    var
        fromRec: Record "EOL Migration AI Suggestion";
        toRec: Record "EOS Migration AI Suggestion";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.Init();
                toRec."Accept" := fromRec."Accept";
                toRec."Column No." := fromRec."Column No.";
                toRec."Data Exch. Def. Code" := fromRec."Data Exch. Def. Code";
                toRec."Data Exch. Line Def. Code" := fromRec."Data Exch. Line Def. Code";
                toRec."Entry No." := fromRec."Entry No.";
                toRec."Field ID" := fromRec."Field ID";
                toRec."Table ID" := fromRec."Table ID";
                toRec."Trust %" := fromRec."Trust %";
                toRec."Trust Level" := fromRec."Trust Level";
                toRec.Insert();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate68026"()
    var
        fromRec: Record "EOL Migration Entity Relation";
        toRec: Record "EOS Migration Entity Relation";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.Init();
                toRec."Entity Code" := fromRec."Entity Code";
                toRec."Required Entity Code" := fromRec."Required Entity Code";
                toRec.Insert();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate68300"()
    var
        fromRec: Record "EOL001 Data Sync. Setup";
        toRec: Record "EOS Data Sync. Setup";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.Init();
                toRec."API SoSmart Core Enabled" := fromRec."API SoSmart Core Enabled";
                toRec."API SoSmart Core TestMode" := fromRec."API SoSmart Core TestMode";
                toRec."Apply - Skip App Version" := fromRec."Apply - Skip App Version";
                toRec."Config. Package Template" := fromRec."Config. Package Template";
                toRec."Current Version No." := fromRec."Current Version No.";
                toRec."Developer Mode" := fromRec."Developer Mode";
                toRec."Primary Key" := fromRec."Primary Key";
                toRec."Version Nos." := fromRec."Version Nos.";
                toRec.Insert();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate68301"()
    var
        fromRec: Record "EOL001 Data Template Version";
        toRec: Record "EOS Data Template Version";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.Init();
                toRec."API SoSmart Syncronized" := fromRec."API SoSmart Syncronized";
                toRec."Application Build" := fromRec."Application Build";
                toRec."Application Version" := fromRec."Application Version";
                toRec."Build File Version" := fromRec."Build File Version";
                if fromRec."Config. Package BLOB".HasValue() then begin
                    fromRec.CalcFields("Config. Package BLOB");
                    fromRec."Config. Package BLOB".CreateInStream(IStream);
                    toRec."Config. Package BLOB".CreateOutStream(OStream);
                    CopyStream(OStream, IStream);
                end;
                toRec."Config. Package Code" := fromRec."Config. Package Code";
                toRec."Description" := fromRec."Description";
                toRec."From Log Entry No." := fromRec."From Log Entry No.";
                toRec."Original Application Version" := fromRec."Original Application Version";
                toRec."Platform File Version" := fromRec."Platform File Version";
                toRec."Platform Product Version" := fromRec."Platform Product Version";
                toRec."Status" := fromRec."Status";
                toRec."To Log Entry No." := fromRec."To Log Entry No.";
                toRec."Version No." := fromRec."Version No.";
                toRec.Insert();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate68302"()
    var
        fromRec: Record "EOL001 Data Template Entry";
        toRec: Record "EOS Data Template Entry";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.Init();
                toRec."Date and Time" := fromRec."Date and Time";
                toRec."Delete Before Process" := fromRec."Delete Before Process";
                toRec."Field No." := fromRec."Field No.";
                toRec."Log Entry No." := fromRec."Log Entry No.";
                toRec."New Value" := fromRec."New Value";
                toRec."Old Value" := fromRec."Old Value";
                toRec."Primary Key" := fromRec."Primary Key";
                toRec."Primary Key Field 1 No." := fromRec."Primary Key Field 1 No.";
                toRec."Primary Key Field 1 Value" := fromRec."Primary Key Field 1 Value";
                toRec."Primary Key Field 2 No." := fromRec."Primary Key Field 2 No.";
                toRec."Primary Key Field 2 Value" := fromRec."Primary Key Field 2 Value";
                toRec."Primary Key Field 3 No." := fromRec."Primary Key Field 3 No.";
                toRec."Primary Key Field 3 Value" := fromRec."Primary Key Field 3 Value";
                toRec."Ref Record ID" := fromRec."Ref Record ID";
                toRec."Table No." := fromRec."Table No.";
                toRec."Time" := fromRec."Time";
                toRec."Type of Change" := fromRec."Type of Change";
                toRec."Version No." := fromRec."Version No.";
                toRec.Insert();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate68303"()
    var
        fromRec: Record "EOL001 Data Version";
        toRec: Record "EOS Data Version";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.Init();
                if fromRec."Config. Package BLOB".HasValue() then begin
                    fromRec.CalcFields("Config. Package BLOB");
                    fromRec."Config. Package BLOB".CreateInStream(IStream);
                    toRec."Config. Package BLOB".CreateOutStream(OStream);
                    CopyStream(OStream, IStream);
                end;
                toRec."Config. Package Code" := fromRec."Config. Package Code";
                toRec."Description" := fromRec."Description";
                toRec."Status" := fromRec."Status";
                toRec."Version No." := fromRec."Version No.";
                toRec.Insert();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate68304"()
    var
        fromRec: Record "EOL001 Data Entry";
        toRec: Record "EOS Data Entry";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.Init();
                toRec."Date and Time" := fromRec."Date and Time";
                toRec."Field No." := fromRec."Field No.";
                toRec."Log Entry No." := fromRec."Log Entry No.";
                toRec."New Value" := fromRec."New Value";
                toRec."Old Value" := fromRec."Old Value";
                toRec."Primary Key" := fromRec."Primary Key";
                toRec."Primary Key Field 1 No." := fromRec."Primary Key Field 1 No.";
                toRec."Primary Key Field 1 Value" := fromRec."Primary Key Field 1 Value";
                toRec."Primary Key Field 2 No." := fromRec."Primary Key Field 2 No.";
                toRec."Primary Key Field 2 Value" := fromRec."Primary Key Field 2 Value";
                toRec."Primary Key Field 3 No." := fromRec."Primary Key Field 3 No.";
                toRec."Primary Key Field 3 Value" := fromRec."Primary Key Field 3 Value";
                toRec."Ref Record ID" := fromRec."Ref Record ID";
                toRec."Table No." := fromRec."Table No.";
                toRec."Time" := fromRec."Time";
                toRec."Type of Change" := fromRec."Type of Change";
                toRec."Version No." := fromRec."Version No.";
                toRec.Insert();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate68305"()
    var
        fromRec: Record "EOL001 Data AppInstalled";
        toRec: Record "EOS Data AppInstalled";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.Init();
                toRec."App Id" := fromRec."App Id";
                toRec."Name" := fromRec."Name";
                toRec."Package ID" := fromRec."Package ID";
                toRec."Version Build" := fromRec."Version Build";
                toRec."Version Major" := fromRec."Version Major";
                toRec."Version Minor" := fromRec."Version Minor";
                toRec."Version No." := fromRec."Version No.";
                toRec."Version Revision" := fromRec."Version Revision";
                toRec.Insert();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate68306"()
    var
        fromRec: Record "EOL001 Data Exception Table";
        toRec: Record "EOS Data Exception Table";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.Init();
                toRec."Active" := fromRec."Active";
                toRec."Skip Entry No. Filter" := fromRec."Skip Entry No. Filter";
                toRec."Table ID" := fromRec."Table ID";
                toRec.Insert();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate68307"()
    var
        fromRec: Record "EOL001 Data Exception Field";
        toRec: Record "EOS Data Exception Field";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.Init();
                toRec."Field No." := fromRec."Field No.";
                toRec."Filter" := fromRec."Filter";
                toRec."Table ID" := fromRec."Table ID";
                toRec.Insert();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate68308"()
    var
        fromRec: Record "DSY Data Request";
        toRec: Record "EOS Data Request";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.Init();
                toRec."EntryNo" := fromRec."EntryNo";
                toRec."FieldNo" := fromRec."FieldNo";
                toRec."OperationType" := fromRec."OperationType";
                toRec."TableFilters" := fromRec."TableFilters";
                toRec."TableNo" := fromRec."TableNo";
                toRec.Insert();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate68399"()
    var
        fromRec: Record "EOL001 Test DataSync";
        toRec: Record "EOS Test DataSync";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.Init();
                toRec."Entry No." := fromRec."Entry No.";
                toRec."Fld BigInteger" := fromRec."Fld BigInteger";
                toRec."Fld Boolean" := fromRec."Fld Boolean";
                toRec."Fld Code" := fromRec."Fld Code";
                toRec."Fld Date" := fromRec."Fld Date";
                toRec."Fld Datetime" := fromRec."Fld Datetime";
                toRec."Fld Decimal" := fromRec."Fld Decimal";
                toRec."Fld Enum" := fromRec."Fld Enum";
                toRec."Fld Integer" := fromRec."Fld Integer";
                toRec."Fld Option" := fromRec."Fld Option";
                toRec."Fld Text" := fromRec."Fld Text";
                toRec.Insert();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate68500"()
    var
        fromRec: Record "ADM Data Process Header";
        toRec: Record "EOS ADM Data Process Header";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.Init();
                toRec."Archive Processed Data" := fromRec."Archive Processed Data";
                toRec."Data Exch. Def Code" := fromRec."Data Exch. Def Code";
                toRec."Description" := fromRec."Description";
                toRec."Direction" := fromRec."Direction";
                toRec."File Type" := fromRec."File Type";
                toRec."Model Code" := fromRec."Model Code";
                toRec."No." := fromRec."No.";
                toRec."Status" := fromRec."Status";
                toRec.Insert();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate68501"()
    var
        fromRec: Record "ADM Data Process Line";
        toRec: Record "EOS ADM Data Process Line";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.Init();
                toRec."Data Exch. Def Code" := fromRec."Data Exch. Def Code";
                toRec."Data Exch. Line Def Code" := fromRec."Data Exch. Line Def Code";
                toRec."Data Exch. No." := fromRec."Data Exch. No.";
                toRec."Data Process No." := fromRec."Data Process No.";
                toRec."Excel Sheet Name" := fromRec."Excel Sheet Name";
                toRec."File Name" := fromRec."File Name";
                toRec."Import" := fromRec."Import";
                toRec."Import Date-Time" := fromRec."Import Date-Time";
                toRec."Import Duration" := fromRec."Import Duration";
                toRec."Imported by" := fromRec."Imported by";
                toRec."Line No." := fromRec."Line No.";
                toRec."Map" := fromRec."Map";
                toRec."Map To Column" := fromRec."Map To Column";
                toRec."Process" := fromRec."Process";
                toRec."Status" := fromRec."Status";
                toRec.Insert();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate68502"()
    var
        fromRec: Record "ADM Data Process Archive";
        toRec: Record "EOS ADM Data Process Archive";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.Init();
                toRec."Data Exch. Def Code" := fromRec."Data Exch. Def Code";
                toRec."Data Exch. Line Def Code" := fromRec."Data Exch. Line Def Code";
                toRec."Data Exch. No." := fromRec."Data Exch. No.";
                toRec."Data Process No." := fromRec."Data Process No.";
                toRec."Entry No." := fromRec."Entry No.";
                toRec."File Content" := fromRec."File Content";
                toRec."File Name" := fromRec."File Name";
                toRec."Import Date-Time" := fromRec."Import Date-Time";
                toRec."Import Duration" := fromRec."Import Duration";
                toRec."Imported by" := fromRec."Imported by";
                toRec."Line No." := fromRec."Line No.";
                toRec."Processed by" := fromRec."Processed by";
                toRec."Processing Date-Time" := fromRec."Processing Date-Time";
                toRec."Processing Duration" := fromRec."Processing Duration";
                toRec.Insert();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate68503"()
    var
        fromRec: Record "ADM Data Process Entity";
        toRec: Record "EOS ADM Data Process Entity";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.Init();
                toRec."Code" := fromRec."Code";
                toRec."Create Properties From File" := fromRec."Create Properties From File";
                toRec."Data Process No." := fromRec."Data Process No.";
                toRec."Delete Table Before Inport" := fromRec."Delete Table Before Inport";
                if fromRec."Delete Table Filter".HasValue() then begin
                    fromRec.CalcFields("Delete Table Filter");
                    fromRec."Delete Table Filter".CreateInStream(IStream);
                    toRec."Delete Table Filter".CreateOutStream(OStream);
                    CopyStream(OStream, IStream);
                end;
                toRec."Delete Table Without Trigger" := fromRec."Delete Table Without Trigger";
                toRec."Description" := fromRec."Description";
                toRec."Excel Sheet Name" := fromRec."Excel Sheet Name";
                toRec."Matrix Cell Label" := fromRec."Matrix Cell Label";
                toRec."Matrix Header Label" := fromRec."Matrix Header Label";
                toRec."Path Filter" := fromRec."Path Filter";
                toRec."Structure Data Start Line No." := fromRec."Structure Data Start Line No.";
                toRec."Structure Type" := fromRec."Structure Type";
                toRec."Table ID" := fromRec."Table ID";
                toRec.Insert();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate68505"()
    var
        fromRec: Record "ADM Setup";
        toRec: Record "EOS ADM Setup";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.Init();
                toRec."Default Mapping Priority" := fromRec."Default Mapping Priority";
                toRec."Primary Key" := fromRec."Primary Key";
                toRec."Valid AI Field Score" := fromRec."Valid AI Field Score";
                toRec.Insert();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate68506"()
    var
        fromRec: Record "ADM Entity Template";
        toRec: Record "EOS ADM Entity Template";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.Init();
                toRec."Data Process No." := fromRec."Data Process No.";
                toRec."Entity Code" := fromRec."Entity Code";
                toRec."Table ID" := fromRec."Table ID";
                toRec."Template Code" := fromRec."Template Code";
                toRec."Template Description" := fromRec."Template Description";
                toRec.Insert();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate68507"()
    var
        fromRec: Record "ADM Entity Template Rule";
        toRec: Record "EOS ADM Entity Template Rule";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.Init();
                toRec."Column No." := fromRec."Column No.";
                toRec."Data Exch. Def. Code" := fromRec."Data Exch. Def. Code";
                toRec."Data Exch. Line Def. Code" := fromRec."Data Exch. Line Def. Code";
                toRec."Data Process No." := fromRec."Data Process No.";
                toRec."Entity Code" := fromRec."Entity Code";
                toRec."Line No." := fromRec."Line No.";
                toRec."Rule Type" := fromRec."Rule Type";
                toRec."Table ID" := fromRec."Table ID";
                toRec."Template Code" := fromRec."Template Code";
                toRec."Value" := fromRec."Value";
                toRec."Value Decimal" := fromRec."Value Decimal";
                toRec.Insert();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate68508"()
    var
        fromRec: Record "ADM Data Process Line Record";
        toRec: Record "EOS ADM Data Process Line Rec.";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.Init();
                toRec."Completed At" := fromRec."Completed At";
                toRec."Data Exch. Line Def Code" := fromRec."Data Exch. Line Def Code";
                toRec."Data Exch. No." := fromRec."Data Exch. No.";
                toRec."Data Process Line No." := fromRec."Data Process Line No.";
                toRec."Data Process No." := fromRec."Data Process No.";
                toRec."Duration" := fromRec."Duration";
                toRec."Error Message" := fromRec."Error Message";
                toRec."Key Words" := fromRec."Key Words";
                toRec."Linked To Record ID" := fromRec."Linked To Record ID";
                toRec."Node ID" := fromRec."Node ID";
                toRec."Record No." := fromRec."Record No.";
                toRec."Started At" := fromRec."Started At";
                toRec."Status" := fromRec."Status";
                toRec.Insert();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate68509"()
    var
        fromRec: Record "ADM Data Mapping Category";
        toRec: Record "EOS ADM Data Mapping Category";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.Init();
                toRec."Code" := fromRec."Code";
                toRec."Description" := fromRec."Description";
                toRec."Field ID" := fromRec."Field ID";
                toRec."Related Table ID" := fromRec."Related Table ID";
                toRec."Table ID" := fromRec."Table ID";
                toRec.Insert();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate68510"()
    var
        fromRec: Record "ADM Data Mapping Entry";
        toRec: Record "EOS ADM Data Mapping Entry";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.Init();
                toRec."Allow Empty Value" := fromRec."Allow Empty Value";
                toRec."Category Code" := fromRec."Category Code";
                toRec."Destination Value" := fromRec."Destination Value";
                toRec."Line No" := fromRec."Line No";
                toRec."Source Value" := fromRec."Source Value";
                toRec.Insert();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate68511"()
    var
        fromRec: Record "ADM Field Setup";
        toRec: Record "EOS ADM Field Setup";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.Init();
                toRec."Constant Value" := fromRec."Constant Value";
                toRec."Data Process Model Code" := fromRec."Data Process Model Code";
                toRec."Field ID" := fromRec."Field ID";
                toRec."Increment By Key" := fromRec."Increment By Key";
                toRec."Increment Step" := fromRec."Increment Step";
                toRec."Notes" := fromRec."Notes";
                toRec."Order" := fromRec."Order";
                toRec."Primary Key" := fromRec."Primary Key";
                toRec."Priority" := fromRec."Priority";
                toRec."Skip Validate" := fromRec."Skip Validate";
                toRec."Synonyms" := fromRec."Synonyms";
                toRec."Table ID" := fromRec."Table ID";
                toRec."Transformation Rule" := fromRec."Transformation Rule";
                toRec."Type" := fromRec."Type";
                toRec.Insert();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate68512"()
    var
        fromRec: Record "ADM Data Process Model";
        toRec: Record "EOS ADM Data Process Model";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.Init();
                toRec."Code" := fromRec."Code";
                toRec."Description" := fromRec."Description";
                toRec."Table ID" := fromRec."Table ID";
                toRec.Insert();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate68513"()
    var
        fromRec: Record "ADM Data Mapping Rule";
        toRec: Record "EOS ADM Data Mapping Rule";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.Init();
                toRec."Column No." := fromRec."Column No.";
                toRec."Constant" := fromRec."Constant";
                toRec."Data Exch. Def Code" := fromRec."Data Exch. Def Code";
                toRec."Data Exch. Line Def Code" := fromRec."Data Exch. Line Def Code";
                toRec."Field ID" := fromRec."Field ID";
                toRec."Line No." := fromRec."Line No.";
                toRec."Reference Column No." := fromRec."Reference Column No.";
                toRec."Reference To Entry No." := fromRec."Reference To Entry No.";
                toRec."Rule Column No." := fromRec."Rule Column No.";
                toRec."Rule Reference Type" := fromRec."Rule Reference Type";
                toRec."Rule Type" := fromRec."Rule Type";
                toRec."Table ID" := fromRec."Table ID";
                toRec.Insert();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate68514"()
    var
        fromRec: Record "ADM Data Exch. Field";
        toRec: Record "EOS ADM Data Exch. Field";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.Init();
                toRec."Column No." := fromRec."Column No.";
                toRec."Data Exch. Def Code" := fromRec."Data Exch. Def Code";
                toRec."Data Exch. Line Def Code" := fromRec."Data Exch. Line Def Code";
                toRec."Data Exch. No." := fromRec."Data Exch. No.";
                toRec."Invalid" := fromRec."Invalid";
                toRec."Line No." := fromRec."Line No.";
                toRec."Node ID" := fromRec."Node ID";
                toRec."Parent Node ID" := fromRec."Parent Node ID";
                toRec."Priority" := fromRec."Priority";
                toRec."Processing Status" := fromRec."Processing Status";
                toRec."Value" := fromRec."Value";
                toRec.Insert();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate70000"()
    var
        fromRec: Record "EOL001 Web Profile";
        toRec: Record "EOS Web Profile";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.Init();
                toRec."Api Key" := fromRec."Api Key";
                toRec."Client ID" := fromRec."Client ID";
                toRec."Client Secret" := fromRec."Client Secret";
                toRec."Code" := fromRec."Code";
                toRec."Create Log Entry" := fromRec."Create Log Entry";
                toRec."Default Action Type" := fromRec."Default Action Type";
                toRec."Description" := fromRec."Description";
                toRec."Domain" := fromRec."Domain";
                toRec."Entry Save Mode" := fromRec."Entry Save Mode";
                toRec."Entry Send Mode" := fromRec."Entry Send Mode";
                toRec."File Extension" := fromRec."File Extension";
                toRec."File Name Prefix" := fromRec."File Name Prefix";
                toRec."File Save Path" := fromRec."File Save Path";
                toRec."Password" := fromRec."Password";
                if fromRec."Request Template".HasValue() then begin
                    fromRec.CalcFields("Request Template");
                    fromRec."Request Template".CreateInStream(IStream);
                    toRec."Request Template".CreateOutStream(OStream);
                    CopyStream(OStream, IStream);
                end;
                toRec."Setup EDI Code" := fromRec."Setup EDI Code";
                toRec."Source Record ID" := fromRec."Source Record ID";
                if fromRec."Source Table Filter".HasValue() then begin
                    fromRec.CalcFields("Source Table Filter");
                    fromRec."Source Table Filter".CreateInStream(IStream);
                    toRec."Source Table Filter".CreateOutStream(OStream);
                    CopyStream(OStream, IStream);
                end;
                toRec."Source Table ID" := fromRec."Source Table ID";
                toRec."Status" := fromRec."Status";
                toRec."Timeout" := fromRec."Timeout";
                if fromRec."URL".HasValue() then begin
                    fromRec.CalcFields("URL");
                    fromRec."URL".CreateInStream(IStream);
                    toRec."URL".CreateOutStream(OStream);
                    CopyStream(OStream, IStream);
                end;
                toRec."Use Authentication" := fromRec."Use Authentication";
                toRec."User" := fromRec."User";
                toRec."Variable Char" := fromRec."Variable Char";
                toRec.Insert();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate70001"()
    var
        fromRec: Record "EOL001 Web Profile Log";
        toRec: Record "EOS Web Profile Log";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.Init();
                toRec."Action Type" := fromRec."Action Type";
                if fromRec."Action URL".HasValue() then begin
                    fromRec.CalcFields("Action URL");
                    fromRec."Action URL".CreateInStream(IStream);
                    toRec."Action URL".CreateOutStream(OStream);
                    CopyStream(OStream, IStream);
                end;
                toRec."Created By" := fromRec."Created By";
                toRec."Creation Date/Time" := fromRec."Creation Date/Time";
                toRec."Entry No." := fromRec."Entry No.";
                toRec."Error Message" := fromRec."Error Message";
                toRec."Request Attachment" := fromRec."Request Attachment";
                if fromRec."Request Data".HasValue() then begin
                    fromRec.CalcFields("Request Data");
                    fromRec."Request Data".CreateInStream(IStream);
                    toRec."Request Data".CreateOutStream(OStream);
                    CopyStream(OStream, IStream);
                end;
                toRec."Request File Path" := fromRec."Request File Path";
                toRec."Source Record ID" := fromRec."Source Record ID";
                toRec."Status" := fromRec."Status";
                toRec."Web Profile Code" := fromRec."Web Profile Code";
                toRec.Insert();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate70002"()
    var
        fromRec: Record "EOL001 Web Entry";
        toRec: Record "EOS Web Entry";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.Init();
                toRec."Attachment No." := fromRec."Attachment No.";
                if fromRec."Entry Data".HasValue() then begin
                    fromRec.CalcFields("Entry Data");
                    fromRec."Entry Data".CreateInStream(IStream);
                    toRec."Entry Data".CreateOutStream(OStream);
                    CopyStream(OStream, IStream);
                end;
                toRec."Entry No." := fromRec."Entry No.";
                toRec."Entry Type" := fromRec."Entry Type";
                toRec."Executed By" := fromRec."Executed By";
                toRec."Execution Date/Time" := fromRec."Execution Date/Time";
                toRec."File Path" := fromRec."File Path";
                toRec."Reference Entry No." := fromRec."Reference Entry No.";
                toRec."Web Profile Code" := fromRec."Web Profile Code";
                toRec.Insert();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate70003"()
    var
        fromRec: Record "EOL001 Web Parameter";
        toRec: Record "EOS Web Parameter";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.Init();
                toRec."Content Parameter" := fromRec."Content Parameter";
                toRec."Line No." := fromRec."Line No.";
                toRec."Parameter Name" := fromRec."Parameter Name";
                toRec."Parameter Value" := fromRec."Parameter Value";
                toRec."Source Field No." := fromRec."Source Field No.";
                toRec."Source Table ID" := fromRec."Source Table ID";
                toRec."Web Profile Code" := fromRec."Web Profile Code";
                toRec.Insert();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate70004"()
    var
        fromRec: Record "EOL001 Web Header";
        toRec: Record "EOS Web Header";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.Init();
                toRec."Content Header" := fromRec."Content Header";
                toRec."Name" := fromRec."Name";
                toRec."Value" := fromRec."Value";
                toRec."Web Profile Code" := fromRec."Web Profile Code";
                toRec.Insert();
            until fromRec.Next() = 0;
    end;

    procedure "Migrate18123476"()
    var
        fromRec: Record "EOS Item Cost History";
        toRec: Record "EOS Item Cost History";
    begin
        fromRec.Reset();
        if fromRec.FindSet() then
            repeat
                toRec.GetBySystemId(fromRec.SystemId);
                toRec."EOL Total Weighed Average Cost" := fromRec."EOS Total Weighed Average Cost";
                toRec.Modify();
            until fromRec.Next() = 0;
    end;*/

    procedure MigrateTables(var SSOTableMigration: Record "SSO Table Migration");
    begin
        if SSOTableMigration.Status in [SSOTableMigration.Status::Processed] then
            SSOTableMigration.FieldError(Status);

        /*case SSOTableMigration."Table ID" of
            9:
                "Migrate9"();
            13:
                "Migrate13"();
            15:
                "Migrate15"();
            18:
                "Migrate18"();
            23:
                "Migrate23"();
            27:
                "Migrate27"();
            36:
                "Migrate36"();
            37:
                "Migrate37"();
            38:
                "Migrate38"();
            81:
                "Migrate81"();
            91:
                "Migrate91"();
            110:
                "Migrate110"();
            111:
                "Migrate111"();
            112:
                "Migrate112"();
            113:
                "Migrate113"();
            114:
                "Migrate114"();
            115:
                "Migrate115"();
            120:
                "Migrate120"();
            122:
                "Migrate122"();
            124:
                "Migrate124"();
            130:
                "Migrate130"();
            156:
                "Migrate156"();
            167:
                "Migrate167"();
            222:
                "Migrate222"();
            242:
                "Migrate242"();
            289:
                "Migrate289"();
            291:
                "Migrate291"();
            308:
                "Migrate308"();
            313:
                "Migrate313"();
            314:
                "Migrate314"();
            315:
                "Migrate315"();
            323:
                "Migrate323"();
            324:
                "Migrate324"();
            951:
                "Migrate951"();
            952:
                "Migrate952"();
            955:
                "Migrate955"();
            1001:
                "Migrate1001"();
            1003:
                "Migrate1003"();
            1214:
                "Migrate1214"();
            1221:
                "Migrate1221"();
            1223:
                "Migrate1223"();
            1225:
                "Migrate1225"();
            5050:
                "Migrate5050"();
            5107:
                "Migrate5107"();
            5108:
                "Migrate5108"();
            5109:
                "Migrate5109"();
            5700:
                "Migrate5700"();
            5718:
                "Migrate5718"();
            5744:
                "Migrate5744"();
            5790:
                "Migrate5790"();
            5850:
                "Migrate5850"();
            5854:
                "Migrate5854"();
            6504:
                "Migrate6504"();
            6650:
                "Migrate6650"();
            6660:
                "Migrate6660"();
            7301:
                "Migrate7301"();
            8623:
                "Migrate8623"();
            12104:
                "Migrate12104"();
            50180:
                "Migrate50180"();
            50181:
                "Migrate50181"();
            50182:
                "Migrate50182"();
            50183:
                "Migrate50183"();
            50184:
                "Migrate50184"();
            50185:
                "Migrate50185"();
            50186:
                "Migrate50186"();
            50187:
                "Migrate50187"();
            50188:
                "Migrate50188"();
            50189:
                "Migrate50189"();
            50190:
                "Migrate50190"();
            50191:
                "Migrate50191"();
            50192:
                "Migrate50192"();
            50193:
                "Migrate50193"();
            50194:
                "Migrate50194"();
            50195:
                "Migrate50195"();
            50196:
                "Migrate50196"();
            50197:
                "Migrate50197"();
            50198:
                "Migrate50198"();
            50200:
                "Migrate50200"();
            50201:
                "Migrate50201"();
            50203:
                "Migrate50203"();
            50204:
                "Migrate50204"();
            50205:
                "Migrate50205"();
            50206:
                "Migrate50206"();
            50207:
                "Migrate50207"();
            50208:
                "Migrate50208"();
            50209:
                "Migrate50209"();
            50210:
                "Migrate50210"();
            50211:
                "Migrate50211"();
            50212:
                "Migrate50212"();
            50213:
                "Migrate50213"();
            50214:
                "Migrate50214"();
            50215:
                "Migrate50215"();
            50216:
                "Migrate50216"();
            50217:
                "Migrate50217"();
            50218:
                "Migrate50218"();
            50219:
                "Migrate50219"();
            50220:
                "Migrate50220"();
            50221:
                "Migrate50221"();
            50222:
                "Migrate50222"();
            50223:
                "Migrate50223"();
            50224:
                "Migrate50224"();
            50225:
                "Migrate50225"();
            50226:
                "Migrate50226"();
            50227:
                "Migrate50227"();
            50250:
                "Migrate50250"();
            50256:
                "Migrate50256"();
            50257:
                "Migrate50257"();
            50258:
                "Migrate50258"();
            50259:
                "Migrate50259"();
            50261:
                "Migrate50261"();
            65000:
                "Migrate65000"();
            65001:
                "Migrate65001"();
            65002:
                "Migrate65002"();
            65003:
                "Migrate65003"();
            65004:
                "Migrate65004"();
            65005:
                "Migrate65005"();
            65006:
                "Migrate65006"();
            65007:
                "Migrate65007"();
            65008:
                "Migrate65008"();
            67000:
                "Migrate67000"();
            67001:
                "Migrate67001"();
            67002:
                "Migrate67002"();
            67003:
                "Migrate67003"();
            67004:
                "Migrate67004"();
            67005:
                "Migrate67005"();
            67006:
                "Migrate67006"();
            67500:
                "Migrate67500"();
            68000:
                "Migrate68000"();
            68001:
                "Migrate68001"();
            68002:
                "Migrate68002"();
            68003:
                "Migrate68003"();
            68004:
                "Migrate68004"();
            68005:
                "Migrate68005"();
            68006:
                "Migrate68006"();
            68007:
                "Migrate68007"();
            68008:
                "Migrate68008"();
            68009:
                "Migrate68009"();
            68010:
                "Migrate68010"();
            68011:
                "Migrate68011"();
            68015:
                "Migrate68015"();
            68016:
                "Migrate68016"();
            68020:
                "Migrate68020"();
            68021:
                "Migrate68021"();
            68022:
                "Migrate68022"();
            68023:
                "Migrate68023"();
            68024:
                "Migrate68024"();
            68025:
                "Migrate68025"();
            68026:
                "Migrate68026"();
            68300:
                "Migrate68300"();
            68301:
                "Migrate68301"();
            68302:
                "Migrate68302"();
            68303:
                "Migrate68303"();
            68304:
                "Migrate68304"();
            68305:
                "Migrate68305"();
            68306:
                "Migrate68306"();
            68307:
                "Migrate68307"();
            68308:
                "Migrate68308"();
            68399:
                "Migrate68399"();
            68500:
                "Migrate68500"();
            68501:
                "Migrate68501"();
            68502:
                "Migrate68502"();
            68503:
                "Migrate68503"();
            68505:
                "Migrate68505"();
            68506:
                "Migrate68506"();
            68507:
                "Migrate68507"();
            68508:
                "Migrate68508"();
            68509:
                "Migrate68509"();
            68510:
                "Migrate68510"();
            68511:
                "Migrate68511"();
            68512:
                "Migrate68512"();
            68513:
                "Migrate68513"();
            68514:
                "Migrate68514"();
            70000:
                "Migrate70000"();
            70001:
                "Migrate70001"();
            70002:
                "Migrate70002"();
            70003:
                "Migrate70003"();
            70004:
                "Migrate70004"();
            18123476:
                "Migrate18123476"();
        end;*/

        SSOTableMigration.SetStatusProcessed();
        SSOTableMigration.Modify();
    end;

    procedure InitTableMigrations()
    var
        TableMigration: Record "SSO Table Migration";
    begin
        TableMigration.Reset();
        TableMigration.DeleteAll();

        TableMigration.Init();
        TableMigration."Table ID" := 9;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 13;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 15;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 18;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 23;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 27;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 36;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 37;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 38;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 81;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 91;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 110;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 111;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 112;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 113;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 114;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 115;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 120;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 122;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 124;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 130;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 156;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 167;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 222;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 242;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 289;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 291;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 308;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 313;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 314;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 315;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 323;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 324;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 951;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 952;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 955;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 1001;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 1003;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 1214;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 1221;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 1223;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 1225;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 5050;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 5107;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 5108;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 5109;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 5700;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 5718;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 5744;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 5790;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 5850;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 5854;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 6504;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 6650;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 6660;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 7301;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 8623;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 12104;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 50180;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 50181;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 50182;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 50183;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 50184;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 50185;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 50186;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 50187;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 50188;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 50189;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 50190;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 50191;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 50192;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 50193;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 50194;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 50195;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 50196;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 50197;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 50198;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 50200;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 50201;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 50203;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 50204;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 50205;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 50206;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 50207;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 50208;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 50209;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 50210;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 50211;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 50212;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 50213;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 50214;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 50215;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 50216;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 50217;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 50218;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 50219;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 50220;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 50221;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 50222;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 50223;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 50224;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 50225;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 50226;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 50227;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 50250;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 50256;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 50257;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 50258;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 50259;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 50261;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 65000;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 65001;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 65002;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 65003;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 65004;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 65005;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 65006;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 65007;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 65008;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 67000;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 67001;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 67002;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 67003;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 67004;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 67005;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 67006;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 67500;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 68000;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 68001;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 68002;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 68003;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 68004;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 68005;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 68006;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 68007;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 68008;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 68009;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 68010;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 68011;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 68015;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 68016;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 68020;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 68021;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 68022;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 68023;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 68024;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 68025;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 68026;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 68300;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 68301;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 68302;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 68303;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 68304;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 68305;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 68306;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 68307;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 68308;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 68399;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 68500;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 68501;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 68502;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 68503;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 68505;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 68506;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 68507;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 68508;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 68509;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 68510;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 68511;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 68512;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 68513;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 68514;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 70000;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 70001;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 70002;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 70003;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 70004;
        TableMigration.Insert();

        TableMigration.Init();
        TableMigration."Table ID" := 18123476;
        TableMigration.Insert();

    end;

    var
        OStream: OutStream;
        IStream: InStream;
        TenantMedia: Record "Tenant Media";
}